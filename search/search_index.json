{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open-Source IS-IS Configuration Labs This series of hands-on labs will help you master the IS-IS routing protocol configuration on a platform of your choice 1 , including: Arista EOS Cisco ASAv, IOSv, IOS XE, IOS XR and Nexus OS FRRouting Dell OS10 Juniper vSRX, vMX and vPTX Nokia SR OS and SR Linux Vyatta VyOS Tip If this is your first visit to this site, you should start with the Installation and Setup documentation or run labs in GitHub codespaces . The initial lab exercises will help you configure basic IS-IS features: Work with FRRouting (optional) Start the IS-IS Routing for IPv4 Explore IS-IS Data Structures IS-IS on Point-to-Point Links Using IS-IS Metrics Dual-Stack IS-IS Routing (coming soon) Optimize IS-IS Adjacencies (coming soon) Troubleshoot IS-IS Adjacencies (coming soon) Want to know what else we have planned? Check the Upcoming Lab Exercises document. Some assembly required: the virtual machines or containers that we recommend to use as external IS-IS speakers are easy to download, but you\u2019ll have to build a Vagrant box or install a vendor-supplied Vagrant box or Docker container image for most other platforms. See installation and setup for details. \u21a9","title":"Labs Overview"},{"location":"#open-source-is-is-configuration-labs","text":"This series of hands-on labs will help you master the IS-IS routing protocol configuration on a platform of your choice 1 , including: Arista EOS Cisco ASAv, IOSv, IOS XE, IOS XR and Nexus OS FRRouting Dell OS10 Juniper vSRX, vMX and vPTX Nokia SR OS and SR Linux Vyatta VyOS Tip If this is your first visit to this site, you should start with the Installation and Setup documentation or run labs in GitHub codespaces . The initial lab exercises will help you configure basic IS-IS features: Work with FRRouting (optional) Start the IS-IS Routing for IPv4 Explore IS-IS Data Structures IS-IS on Point-to-Point Links Using IS-IS Metrics Dual-Stack IS-IS Routing (coming soon) Optimize IS-IS Adjacencies (coming soon) Troubleshoot IS-IS Adjacencies (coming soon) Want to know what else we have planned? Check the Upcoming Lab Exercises document. Some assembly required: the virtual machines or containers that we recommend to use as external IS-IS speakers are easy to download, but you\u2019ll have to build a Vagrant box or install a vendor-supplied Vagrant box or Docker container image for most other platforms. See installation and setup for details. \u21a9","title":"Open-Source IS-IS Configuration Labs"},{"location":"1-setup/","text":"Software Installation and Lab Setup It\u2019s easiest to use the IS-IS labs with netlab . Still, you can use most of them (potentially with slightly reduced functionality) with any other virtual lab environment or on physical gear. For the rest of this document, we\u2019ll assume you decided to use netlab ; if you want to set up your lab in some other way, read the Manual Setup section of the BGP Labs documentation. Warning IS-IS labs work best with netlab release 1.8.4 or later. If you\u2019re using an earlier netlab release, please upgrade with pip3 install --upgrade networklab . Select the Network Devices You Will Work With You can run FRRouting in all netlab -supported virtualization environments (VirtualBox, libvirt, or Docker) 2 , and if you want to start practicing IS-IS with minimum hassle, consider using FRRouting for all lab devices. You can even run FRRouting containers on Macbooks with Apple silicon . If you\u2019d like to use a more traditional networking device, use any other netlab -supported device for which we implemented basic IS-IS configuration as the device to practice with 1 . I recommend Arista cEOS or Nokia SR Linux containers; they are the easiest ones to install and use. Tip If you plan to run the labs in free GitHub Codespaces , you MUST use container-based network devices like Arista cEOS, FRR, Nokia SR Linux, or Vyos. Select the Additional Devices in Your Lab Some labs use additional routers \u2013 preconfigured devices with which your routers exchange routing information. You won\u2019t configure those devices, but you might have to log into them and execute show commands. The default setup uses FRRouting for additional routers; we also generated all the show printouts with FRRouting. Alternatively, you can use any other device for which we implemented basic IS-IS configuration as additional routers. Additional limitations (should they exist) are listed under the Device Requirements section of individual lab exercises. Select the Virtualization Environment Now that you know which network device to use, check which virtualization environment you can use. Running IS-IS labs in a free GitHub Codespace is an excellent starting point, but if you decide to build your own infrastructure, containerlab is easier to set up than libvirt , with virtualbox being a distant third. Now for a few gotchas: You can use virtualbox if you want to run the lab devices as virtual machines on your Windows- or MacOS laptop with Intel CPU, but even then, I\u2019d prefer running them in a Ubuntu VM . Your hardware and virtualization software (for example, VirtualBox or VMware Fusion) must support nested virtualization if you want to use libvirt on that Ubuntu VM. You don\u2019t need nested virtualization to run Docker containers unless you\u2019re using the crazy trick we\u2019re forced to use for Juniper vMX or Nokia SR OS \u2013 they\u2019re running as a virtual machine within a container . Software Installation Based on the choices you made, you\u2019ll find the installation instructions in one of these documents: Using GitHub Codespaces Ubuntu VM Installation on Windows or MacOS Ubuntu Server Installation Running netlab on any other Linux Server Running netlab in a Public Cloud Running netlab on Apple silicon Discouraged: Virtualbox-Based Lab on Windows or MacOS Once you have completed the software installation you have to deal with the stupidities of downloading and installing network device images ( Virtualbox , libvirt , containers ) unless you decided to use FRR, Nokia SR Linux, or Vyos. I would love to simplify the process, but the networking vendors refuse to play along. Even worse, their licenses prohibit me from downloading the images and creating a packaged VM with preinstalled network devices for you 3 . Fortunately, you only have to go through this colossal waste of time once. Setting Up the Labs We finally got to the fun part \u2013 setting up the labs. If you\u2019re not using GitHub Codespaces: Select a directory where you want to have the IS-IS labs Clone the isis GitHub repository with git clone https://github.com/bgplab/isis.git . GitHub UI gives you other options in the green Code button, including Download ZIP After you get a local copy of the repository: If needed, edit the defaults.yml file in the top directory to set your preferred network device and virtualization environment. For example, I\u2019m using the following settings to run the labs with Arista EOS containers while using FRRouting as the external IS-IS routers: device: eos # Change to your preferred network device provider: clab # Change to virtualbox or libvirt if needed groups: external: device: frr # Change to your preferred external router In a terminal window, change the current directory to one of the lab directories (for example, basic/1-simple-ipv4 ), and execute netlab up . Wait for the lab to start and use netlab connect to connect to individual lab devices Have fun. When you\u2019re done, collect the device configurations with netlab collect (if you want to save them) and shut down the lab with netlab down Change the current directory to another lab directory and repeat. Once you run out of lab exercises, create a new one and contribute it with a pull request ;) Most network devices require an x86 CPU. You must run the labs on a device with an x86 CPU (Intel or AMD) to use them. \u21a9 There is no official FRR virtual machine image \u2013 netlab has to download and install FRR on a Ubuntu VM whenever you start an frr node as a virtual machine. Using FRR containers is faster and consumes way less bandwidth or memory. \u21a9 I\u2019m not going to pay a lawyer to read their boilerplate stuff, and I\u2019m definitely not going to rely on my amateur understanding of US copyright law. \u21a9","title":"Installation and Setup"},{"location":"1-setup/#software-installation-and-lab-setup","text":"It\u2019s easiest to use the IS-IS labs with netlab . Still, you can use most of them (potentially with slightly reduced functionality) with any other virtual lab environment or on physical gear. For the rest of this document, we\u2019ll assume you decided to use netlab ; if you want to set up your lab in some other way, read the Manual Setup section of the BGP Labs documentation. Warning IS-IS labs work best with netlab release 1.8.4 or later. If you\u2019re using an earlier netlab release, please upgrade with pip3 install --upgrade networklab .","title":"Software Installation and Lab Setup"},{"location":"1-setup/#select-the-network-devices-you-will-work-with","text":"You can run FRRouting in all netlab -supported virtualization environments (VirtualBox, libvirt, or Docker) 2 , and if you want to start practicing IS-IS with minimum hassle, consider using FRRouting for all lab devices. You can even run FRRouting containers on Macbooks with Apple silicon . If you\u2019d like to use a more traditional networking device, use any other netlab -supported device for which we implemented basic IS-IS configuration as the device to practice with 1 . I recommend Arista cEOS or Nokia SR Linux containers; they are the easiest ones to install and use. Tip If you plan to run the labs in free GitHub Codespaces , you MUST use container-based network devices like Arista cEOS, FRR, Nokia SR Linux, or Vyos.","title":"Select the Network Devices You Will Work With"},{"location":"1-setup/#select-the-additional-devices-in-your-lab","text":"Some labs use additional routers \u2013 preconfigured devices with which your routers exchange routing information. You won\u2019t configure those devices, but you might have to log into them and execute show commands. The default setup uses FRRouting for additional routers; we also generated all the show printouts with FRRouting. Alternatively, you can use any other device for which we implemented basic IS-IS configuration as additional routers. Additional limitations (should they exist) are listed under the Device Requirements section of individual lab exercises.","title":"Select the Additional Devices in Your Lab"},{"location":"1-setup/#select-the-virtualization-environment","text":"Now that you know which network device to use, check which virtualization environment you can use. Running IS-IS labs in a free GitHub Codespace is an excellent starting point, but if you decide to build your own infrastructure, containerlab is easier to set up than libvirt , with virtualbox being a distant third. Now for a few gotchas: You can use virtualbox if you want to run the lab devices as virtual machines on your Windows- or MacOS laptop with Intel CPU, but even then, I\u2019d prefer running them in a Ubuntu VM . Your hardware and virtualization software (for example, VirtualBox or VMware Fusion) must support nested virtualization if you want to use libvirt on that Ubuntu VM. You don\u2019t need nested virtualization to run Docker containers unless you\u2019re using the crazy trick we\u2019re forced to use for Juniper vMX or Nokia SR OS \u2013 they\u2019re running as a virtual machine within a container .","title":"Select the Virtualization Environment"},{"location":"1-setup/#software-installation","text":"Based on the choices you made, you\u2019ll find the installation instructions in one of these documents: Using GitHub Codespaces Ubuntu VM Installation on Windows or MacOS Ubuntu Server Installation Running netlab on any other Linux Server Running netlab in a Public Cloud Running netlab on Apple silicon Discouraged: Virtualbox-Based Lab on Windows or MacOS Once you have completed the software installation you have to deal with the stupidities of downloading and installing network device images ( Virtualbox , libvirt , containers ) unless you decided to use FRR, Nokia SR Linux, or Vyos. I would love to simplify the process, but the networking vendors refuse to play along. Even worse, their licenses prohibit me from downloading the images and creating a packaged VM with preinstalled network devices for you 3 . Fortunately, you only have to go through this colossal waste of time once.","title":"Software Installation"},{"location":"1-setup/#defaults","text":"We finally got to the fun part \u2013 setting up the labs. If you\u2019re not using GitHub Codespaces: Select a directory where you want to have the IS-IS labs Clone the isis GitHub repository with git clone https://github.com/bgplab/isis.git . GitHub UI gives you other options in the green Code button, including Download ZIP After you get a local copy of the repository: If needed, edit the defaults.yml file in the top directory to set your preferred network device and virtualization environment. For example, I\u2019m using the following settings to run the labs with Arista EOS containers while using FRRouting as the external IS-IS routers: device: eos # Change to your preferred network device provider: clab # Change to virtualbox or libvirt if needed groups: external: device: frr # Change to your preferred external router In a terminal window, change the current directory to one of the lab directories (for example, basic/1-simple-ipv4 ), and execute netlab up . Wait for the lab to start and use netlab connect to connect to individual lab devices Have fun. When you\u2019re done, collect the device configurations with netlab collect (if you want to save them) and shut down the lab with netlab down Change the current directory to another lab directory and repeat. Once you run out of lab exercises, create a new one and contribute it with a pull request ;) Most network devices require an x86 CPU. You must run the labs on a device with an x86 CPU (Intel or AMD) to use them. \u21a9 There is no official FRR virtual machine image \u2013 netlab has to download and install FRR on a Ubuntu VM whenever you start an frr node as a virtual machine. Using FRR containers is faster and consumes way less bandwidth or memory. \u21a9 I\u2019m not going to pay a lawyer to read their boilerplate stuff, and I\u2019m definitely not going to rely on my amateur understanding of US copyright law. \u21a9","title":"Setting Up the Labs"},{"location":"3-upcoming/","text":"Upcoming Labs The first few labs are already online ; the list of ideas is much longer. Here they are: Getting Started Dual-Stack IS-IS Routing Enable IS-IS for IPv4 and IPv6 Explore single-topology and multi-topology behavior Optimize IS-IS Adjacencies Change the IS-type to L2-only Explain the difference between L1+L2 and L2-only adjacencies Troubleshoot IS-IS Adjacencies This lab will include the most common mistakes that prevent an IS-IS adjacency from forming, including: MTU mismatch L1/L2 mismatch Area mismatch on L1 adjacency 3-way handshake on point-to-point links Configure IS-IS Features Passive IS-IS Interfaces Explain the need for passive interfaces Configure passive IS-IS interfaces If available, turn off the advertisement of inter-router prefixes Influence the Designated IS Election Explain the need for DIS priority Configure DIS priority on a router Protect IS-IS Adjacencies with MD5 Authentication Configure IS-IS area- and interface passwords Route Redistribution into IS-IS Configure static route and connected interface redistribution into IS-IS Fast IS-IS Failure Detection and Convergence Configure IS-IS timers Use BFD Advanced Labs Multi-Level IS-IS Networks Explain intra-area and inter-area routing Configure a network with multiple areas and L1/L2 routers Graceful Shutdown with IS-IS Overload Bit Configure IS-IS overload bit or maximum metric to drain traffic from a transit router Build an SR-MPLS Network with IS-IS Build a BGP-free MPLS core using SR-MPLS with IS-IS Configure IS-IS Fast Reroute Using TI-LFA In a triangle network, configure the longer path as a backup path Using IS-IS with SRv6 Build a BGP-free IPv6 core using SRv6 for end-to-end transport","title":"Overview"},{"location":"3-upcoming/#upcoming-labs","text":"The first few labs are already online ; the list of ideas is much longer. Here they are:","title":"Upcoming Labs"},{"location":"3-upcoming/#getting-started","text":"Dual-Stack IS-IS Routing Enable IS-IS for IPv4 and IPv6 Explore single-topology and multi-topology behavior Optimize IS-IS Adjacencies Change the IS-type to L2-only Explain the difference between L1+L2 and L2-only adjacencies Troubleshoot IS-IS Adjacencies This lab will include the most common mistakes that prevent an IS-IS adjacency from forming, including: MTU mismatch L1/L2 mismatch Area mismatch on L1 adjacency 3-way handshake on point-to-point links","title":"Getting Started"},{"location":"3-upcoming/#configure-is-is-features","text":"Passive IS-IS Interfaces Explain the need for passive interfaces Configure passive IS-IS interfaces If available, turn off the advertisement of inter-router prefixes Influence the Designated IS Election Explain the need for DIS priority Configure DIS priority on a router Protect IS-IS Adjacencies with MD5 Authentication Configure IS-IS area- and interface passwords Route Redistribution into IS-IS Configure static route and connected interface redistribution into IS-IS Fast IS-IS Failure Detection and Convergence Configure IS-IS timers Use BFD","title":"Configure IS-IS Features"},{"location":"3-upcoming/#advanced-labs","text":"Multi-Level IS-IS Networks Explain intra-area and inter-area routing Configure a network with multiple areas and L1/L2 routers Graceful Shutdown with IS-IS Overload Bit Configure IS-IS overload bit or maximum metric to drain traffic from a transit router Build an SR-MPLS Network with IS-IS Build a BGP-free MPLS core using SR-MPLS with IS-IS Configure IS-IS Fast Reroute Using TI-LFA In a triangle network, configure the longer path as a backup path Using IS-IS with SRv6 Build a BGP-free IPv6 core using SRv6 for end-to-end transport","title":"Advanced Labs"},{"location":"4-codespaces/","text":"Use GitHub Codespaces You can run IS-IS labs in (free 1 ) GitHub codespaces ; all you need is a GitHub account: Create a new codespace for your IS-IS labs or connect to an existing codespace . Unless you\u2019re using GitHub codespaces with VScode (in which case you know what to do), your codespace opens in a new browser window with three tabs: Explorer (repository folders), Preview (starting with README), and Terminal. Select Lab Devices The IS-IS labs repository uses FRRouting containers as the default device. To change the device settings, edit the defaults.yml file with vi or nano . Tip It\u2019s best to use network devices with free-to-download container images (FRRouting, Nokia SR Linux, Vyos). Use FRRouting containers to use the 2 CPU/8 GB codespaces VM with larger labs. Codespaces have persistent storage; you can download and install other containers . To use containers that have to be downloaded from the vendors\u2019 website, download them onto your laptop, drag-and-drop them into the Folders , and install them like you would on a local netlab instance . You cannot run virtual machines in codespaces (yet?). This also precludes running VMs in virtual machines (the vrnetlab approach). Start a Lab Once you have the codespaces up and running: Click on the desired lab exercise in the README.md preview window to select the exercise folder. Right-click on the exercise folder and select \u201c Open in Integrated Terminal \u201d to launch a bash session in the desired directory. Execute netlab up to start the lab. Expand the exercise folder in the Explorer tab. Right-click on the README.md file and select \u201c Open Preview \u201d to open the rendered version of the file. Click the link in the README.md file to get the exercise description in the preview pane. Connect to your devices with the netlab connect command executed in the Terminal pane. Cleanup and Shutdown Finally, don\u2019t forget to shut down the lab with netlab down and stop your codespace after you\u2019re done: Click on the blue \u201c Codespaces \u201d button in the bottom-left corner of the browser window. Select \u201c Stop Current Codespace \u201d. You should also adjust idle timeout and default retention period in your codespaces settings . You get 120 free core hours per month or pay for more . \u21a9","title":"Use GitHub Codespaces"},{"location":"4-codespaces/#use-github-codespaces","text":"You can run IS-IS labs in (free 1 ) GitHub codespaces ; all you need is a GitHub account: Create a new codespace for your IS-IS labs or connect to an existing codespace . Unless you\u2019re using GitHub codespaces with VScode (in which case you know what to do), your codespace opens in a new browser window with three tabs: Explorer (repository folders), Preview (starting with README), and Terminal.","title":"Use GitHub Codespaces"},{"location":"4-codespaces/#select-lab-devices","text":"The IS-IS labs repository uses FRRouting containers as the default device. To change the device settings, edit the defaults.yml file with vi or nano . Tip It\u2019s best to use network devices with free-to-download container images (FRRouting, Nokia SR Linux, Vyos). Use FRRouting containers to use the 2 CPU/8 GB codespaces VM with larger labs. Codespaces have persistent storage; you can download and install other containers . To use containers that have to be downloaded from the vendors\u2019 website, download them onto your laptop, drag-and-drop them into the Folders , and install them like you would on a local netlab instance . You cannot run virtual machines in codespaces (yet?). This also precludes running VMs in virtual machines (the vrnetlab approach).","title":"Select Lab Devices"},{"location":"4-codespaces/#start-a-lab","text":"Once you have the codespaces up and running: Click on the desired lab exercise in the README.md preview window to select the exercise folder. Right-click on the exercise folder and select \u201c Open in Integrated Terminal \u201d to launch a bash session in the desired directory. Execute netlab up to start the lab. Expand the exercise folder in the Explorer tab. Right-click on the README.md file and select \u201c Open Preview \u201d to open the rendered version of the file. Click the link in the README.md file to get the exercise description in the preview pane. Connect to your devices with the netlab connect command executed in the Terminal pane.","title":"Start a Lab"},{"location":"4-codespaces/#cleanup-and-shutdown","text":"Finally, don\u2019t forget to shut down the lab with netlab down and stop your codespace after you\u2019re done: Click on the blue \u201c Codespaces \u201d button in the bottom-left corner of the browser window. Select \u201c Stop Current Codespace \u201d. You should also adjust idle timeout and default retention period in your codespaces settings . You get 120 free core hours per month or pay for more . \u21a9","title":"Cleanup and Shutdown"},{"location":"99-about/","text":"About the Project In 2023, I started the Open-Source BGP Labs project to recreate the labs I created in the early 1990s. As I posted a status update a year later , Henk Smit made an excellent suggestion : If you ever want to do something similar for IS-IS, I\u2019d be happy to help. I think it would already be helpful to just cover the basics of IS-IS. There is so little knowledge about IS-IS out there, that any new good resource would be awesome. As I was involved in a similar project in the 1990s, it wasn\u2019t hard to persuade me to start a similar series of \u201c IS-IS from rookie to hero \u201d lab exercises. Welcome to the Open-Source IS-IS Configuration Labs project. The project uses netlab 2 to set up the labs and FRRouting containers or a few other devices as external IS-IS routers. You can use whatever networking devices you wish to work on, and if they happen to be supported by netlab , you\u2019ll get lab topology and basic device configuration for each lab set up in seconds 3 . Most lab exercises using external devices include device configurations for the external routers for people who love wasting time with GUI. You\u2019ll find the lab topology files and initial device configurations in a GitHub repository , but you might explore the lab exercises first . As always, everything starts with a long wish list . I probably missed something important \u2013 please open an issue or a discussion , or (even better) become a contributor and submit a PR. As long as it\u2019s supported by netlab . \u21a9 When you happen to have a Hammer of Thor handy, everything looks like a nail waiting to be hit ;) \u21a9 Unless you love using resource hogs like Nexus OS, IOS XR, or some Junos variants. \u21a9","title":"About the Project"},{"location":"99-about/#about-the-project","text":"In 2023, I started the Open-Source BGP Labs project to recreate the labs I created in the early 1990s. As I posted a status update a year later , Henk Smit made an excellent suggestion : If you ever want to do something similar for IS-IS, I\u2019d be happy to help. I think it would already be helpful to just cover the basics of IS-IS. There is so little knowledge about IS-IS out there, that any new good resource would be awesome. As I was involved in a similar project in the 1990s, it wasn\u2019t hard to persuade me to start a similar series of \u201c IS-IS from rookie to hero \u201d lab exercises. Welcome to the Open-Source IS-IS Configuration Labs project. The project uses netlab 2 to set up the labs and FRRouting containers or a few other devices as external IS-IS routers. You can use whatever networking devices you wish to work on, and if they happen to be supported by netlab , you\u2019ll get lab topology and basic device configuration for each lab set up in seconds 3 . Most lab exercises using external devices include device configurations for the external routers for people who love wasting time with GUI. You\u2019ll find the lab topology files and initial device configurations in a GitHub repository , but you might explore the lab exercises first . As always, everything starts with a long wish list . I probably missed something important \u2013 please open an issue or a discussion , or (even better) become a contributor and submit a PR. As long as it\u2019s supported by netlab . \u21a9 When you happen to have a Hammer of Thor handy, everything looks like a nail waiting to be hit ;) \u21a9 Unless you love using resource hogs like Nexus OS, IOS XR, or some Junos variants. \u21a9","title":"About the Project"},{"location":"basic/","text":"Deploy IS-IS in Your Network The first set of the IS-IS labs focuses on the configuration, monitoring, and troubleshooting of basic IS-IS features: Work with FRRouting (optional) Start the IS-IS Routing for IPv4 Explore the IS-IS Database IS-IS on Point-to-Point Links (coming soon) Using IS-IS Metrics (coming soon) Dual-Stack IS-IS Routing (coming soon) Optimize IS-IS Adjacencies (coming soon) Troubleshoot IS-IS Adjacencies (coming soon)","title":"Overview"},{"location":"basic/#deploy-is-is-in-your-network","text":"The first set of the IS-IS labs focuses on the configuration, monitoring, and troubleshooting of basic IS-IS features: Work with FRRouting (optional) Start the IS-IS Routing for IPv4 Explore the IS-IS Database IS-IS on Point-to-Point Links (coming soon) Using IS-IS Metrics (coming soon) Dual-Stack IS-IS Routing (coming soon) Optimize IS-IS Adjacencies (coming soon) Troubleshoot IS-IS Adjacencies (coming soon)","title":"Deploy IS-IS in Your Network"},{"location":"basic/0-frrouting/","text":"Configuring IS-IS on FRRouting Most networking devices 1 use a configuration command line interface (CLI) to interact with the end-user. The CLI usually provides show commands to inspect the state of the device and a configuration mode that allows the user to configure the device. FRRouting is different. It\u2019s a suite of application-layer daemons running on Linux. Linux shell is used as the initial CLI. To configure a device that uses FRRouting without an extra CLI wrapper (like VyOS), you usually have to: Use standard Linux tools like ifupdown to configure the interfaces; Edit FRRouting configuration files to start routing protocol daemons Start FRRouting configuration shell from the Linux CLI. The Linux interfaces and IP addresses will be configured automatically if you start the IS-IS labs with the netlab up command. You will have to start the routing protocol daemons in the initial lab exercises if you plan to use FRRouting within virtual machines as the user routers, and you might have to execute show commands on Cumulus Linux or FRRouting acting as the external routers. You\u2019ll practice both in this lab exercise. Start the Lab Assuming you already set up your lab infrastructure : Change directory to basic/0-frrouting Execute netlab up to start a lab with two FRRouting virtual machines or containers (depending on your lab setup). R2 is preconfigured to run IS-IS; if you\u2019re using virtual machines, you might have to enable the IS-IS daemon on R1. Log into the devices ( r1 and r2 ) with the netlab connect command. Start the IS-IS Daemon Most network devices start routing daemons when you configure them through the configuration CLI or API. FRRouting is different. To start a routing daemon, you must enable the desired routing daemons in a configuration file and restart the top-level FRRouting process. You can check the FRR daemon processes running on your virtual machines with the sudo systemctl status frr.service command. It displays the running FRR daemons and the recent FRR logging messages, for example 2 : r2(bash)#sudo systemctl status frr.service \u25cf frr.service - FRRouting Loaded: loaded (/lib/systemd/system/frr.service; enabled; vendor preset: enabled) Active: active (running) since Wed 2024-07-17 17:09:27 UTC; 37s ago Docs: https://frrouting.readthedocs.io/en/latest/setup.html Process: 4051 ExecStart=/usr/lib/frr/frrinit.sh start (code=exited, status=0/SUCCESS) Main PID: 4071 (watchfrr) Status: \"FRR Operational\" Tasks: 1 (limit: 1049) Memory: 1.8M CGroup: /system.slice/frr.service \u2514\u25004071 /usr/lib/frr/watchfrr -d -F traditional zebra mgmtd isisd staticd Jul 17 17:09:27 r2 systemd[1]: Starting FRRouting... Jul 17 17:09:27 r2 frrinit.sh[4051]: * Starting watchfrr with command: ' /usr/lib/frr/watchfrr -d -F traditional zebra mgmtd > Jul 17 17:09:27 r2 watchfrr[4071]: [T83RR-8SM5G] watchfrr 10.0.1 starting: vty@0 Jul 17 17:09:27 r2 watchfrr[4071]: [QDG3Y-BY5TN] zebra state -> up : connect succeeded Jul 17 17:09:27 r2 watchfrr[4071]: [QDG3Y-BY5TN] mgmtd state -> up : connect succeeded Jul 17 17:09:27 r2 watchfrr[4071]: [QDG3Y-BY5TN] isisd state -> up : connect succeeded Jul 17 17:09:27 r2 watchfrr[4071]: [QDG3Y-BY5TN] staticd state -> up : connect succeeded Jul 17 17:09:27 r2 watchfrr[4071]: [KWE5Q-QNGFC] all daemons up, doing startup-complete notify Jul 17 17:09:27 r2 frrinit.sh[4051]: * Started watchfrr Jul 17 17:09:27 r2 systemd[1]: Started FRRouting. You cannot use the same command in FRRouting containers as they don\u2019t use systemd . The easiest way to find daemons in FRRouting containers is to use the ps -ef|grep frr command 3 . This is the printout you could get when the IS-IS daemon is already running: 1 root 0:00 /sbin/tini -- /usr/lib/frr/docker-start 7 root 0:00 {docker-start} /bin/bash /usr/lib/frr/docker-start 15 root 0:00 /usr/lib/frr/watchfrr zebra mgmtd isisd staticd 25 frr 0:00 /usr/lib/frr/zebra -d -F datacenter -A 127.0.0.1 -s 90000000 30 frr 0:00 /usr/lib/frr/mgmtd -d -F datacenter 32 frr 0:00 /usr/lib/frr/isisd -d -F datacenter -A 127.0.0.1 35 frr 0:00 /usr/lib/frr/staticd -d -F datacenter -A 127.0.0.1 366 root 0:00 grep frr The list of FRRouting daemons you want to enable is stored in the /etc/frr/daemons file. To enable the FRRouting IS-IS daemon, you have to: Add the isisd=yes line to the /etc/frr/daemons file 4 . Restart FRRouting with the sudo systemctl restart frr.service command (see also: using sudo ) Warning You cannot change the FRR daemons in FRR containers. Restarting FRR would kill the container. netlab takes care of that and enables all the daemons necessary to complete the lab exercises. Restarting FRR daemons wipes out the current (running) configuration. If you want to retain it, save it to the startup configuration with the vtysh write command. The write command saves the running configuration (that you can inspect with show running-config ) into the /etc/frr/frr.conf file. However, the show startup-config 5 does not display the content of that file. Exit vtysh and use the more /etc/frr/frr.conf command 6 to inspect it. You could add the required line to the FRRouting daemons file with any text editor 7 or use the following trick: Use sudo bash to start another Linux shell as the root user Use the echo command with output redirection to add a line to the /etc/frr/daemons file. rtr(bash)#sudo bash root@rtr:/# echo 'isis=yes' >>/etc/frr/daemons root@rtr:/# exit After enabling the IS-IS daemon and restarting FRR, you should see the isisd process in the ps -ef printout or the IS-IS daemon mentioned in the sudo systemctl status frr.service printout. Work with the FRRouting CLI FRRouting suite includes a virtual shell ( vtysh ) closely resembling industry-standard CLI 8 . It has to be started from the Linux command line with the vtysh command. The vtysh CLI has to run as the root user unless you change the FRR-related permissions to allow a regular user to use it. The usual command to start the vtysh is thus sudo vtysh (but see also To Sudo Or Not to Sudo ). r2(bash)#sudo vtysh Hello, this is FRRouting (version 9.1_git). Copyright 1996-2005 Kunihiro Ishiguro, et al. r2# Once you started vtysh , you can execute show commands to inspect the device state, for example: r2(bash)#sudo vtysh Hello, this is FRRouting (version 9.1_git). Copyright 1996-2005 Kunihiro Ishiguro, et al. r2# show ip route Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, F - PBR, f - OpenFabric, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure C>* 10.0.0.2/32 is directly connected, lo, 00:02:26 C>* 10.1.0.0/30 is directly connected, eth1, 00:02:26 You can also use the --show option of the netlab connect command to execute a single command on a FRR/Cumulus Linux device[^UQ]. For example, to inspect the IS-IS topology database, use netlab connect --show isis database : $ netlab connect r2 --show isis database Connecting to container clab-frrouting-r2, executing vtysh -c \"show isis database\" Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r2.00-00 * 81 0x00000001 0xec86 1489 0/0/0 1 LSPs To configure FRRouting daemons, use the configure vtysh command and enter configuration commands similar to those you\u2019d use on Cisco IOS or Arista EOS: r2(bash)#vtysh Hello, this is FRRouting (version 9.1_git). Copyright 1996-2005 Kunihiro Ishiguro, et al. r2# configure r2(config)# router isis Gandalf r2(config-router)# To Sudo Or Not to Sudo The vtysh usually has to run as the root user, so you should start it with the sudo vtysh command. Unfortunately, things are never as simple as they look in the Linux world: When using SSH, you log into Cumulus Linux or FRRouting virtual machines as a regular user (user vagrant in netlab -created labs) and have to use the sudo command to start vtysh . Cumulus Linux and FRR containers run as the root user, and you connect to them as the root user with the docker exec or netlab connect commands 9 . When working with containers, you can start vtysh without using the sudo command. You can execute sudo vtysh as a root user on Cumulus Linux containers but not within an FRR container. The FRR container does not include the sudo command. Long story short: Use sudo vtysh whenever possible to burn it into your muscle memory. Use vtysh if you use FRRouting containers as the lab devices. Using Output Filters Unlike many other network operating systems, FRRouting vtysh does not have output filters. You probably don\u2019t need them as you\u2019ll be running FRR on top of a Unix-like operating system that supports pipes, but it might be a bit convoluted to use vtysh in a pipe. To use the vtysh output in a pipe, you have to execute vtysh and get the results of a show command in a single command: You could use sudo vtysh -c 'show command' when you\u2019re in the bash shell of a lab device, for example: r2(bash)#vtysh -c 'show isis database'|grep r2 r2.00-00 * 81 0x00000001 0xec86 1302 0/0/0 Alternatively, you could use the netlab connect --show command to execute a vtysh show command on a lab device: $ netlab connect r2 -q --show isis database|grep r2 r2.00-00 * 81 0x00000001 0xec86 1286 0/0/0 Tip Use netlab connect --quiet --show to omit the Connecting to... message. The following table contains a mapping between common network operating system filters and Linux CLI commands: NOS filter Linux CLI command include grep exclude grep -v begin grep -A 10000 10 end grep -B 10000 section no equivalent Including devices based on Linux like Arista EOS, Cisco Nexus OS, or Nokia SR Linux \u21a9 The printout details depend on the Linux and FRR versions, but you\u2019ll always be able to determine whether the IS-IS process is running. \u21a9 You can use the same command with FRRouting running in a virtual machine. \u21a9 See Configuring FRRouting Cumulus Linux documentation for more details. \u21a9 At least on FRRouting version 9.1 and earlier \u21a9 You might have to prefix it with sudo \u21a9 vi is available in Cumulus Linux containers. vi and nano are available in Cumulus Linux and FRR virtual machines. \u21a9 An euphemism for Cisco IOS CLI that is used when you try to avoid nasty encounters with Cisco\u2019s legal team. \u21a9 When in doubt, use the whoami command. \u21a9 The \u201810000\u2019 parameter specifies the number of lines after the match. Increase it for very long printouts ;) \u21a9","title":"Configuring IS-IS on FRRouting"},{"location":"basic/0-frrouting/#configuring-is-is-on-frrouting","text":"Most networking devices 1 use a configuration command line interface (CLI) to interact with the end-user. The CLI usually provides show commands to inspect the state of the device and a configuration mode that allows the user to configure the device. FRRouting is different. It\u2019s a suite of application-layer daemons running on Linux. Linux shell is used as the initial CLI. To configure a device that uses FRRouting without an extra CLI wrapper (like VyOS), you usually have to: Use standard Linux tools like ifupdown to configure the interfaces; Edit FRRouting configuration files to start routing protocol daemons Start FRRouting configuration shell from the Linux CLI. The Linux interfaces and IP addresses will be configured automatically if you start the IS-IS labs with the netlab up command. You will have to start the routing protocol daemons in the initial lab exercises if you plan to use FRRouting within virtual machines as the user routers, and you might have to execute show commands on Cumulus Linux or FRRouting acting as the external routers. You\u2019ll practice both in this lab exercise.","title":"Configuring IS-IS on FRRouting"},{"location":"basic/0-frrouting/#start-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/0-frrouting Execute netlab up to start a lab with two FRRouting virtual machines or containers (depending on your lab setup). R2 is preconfigured to run IS-IS; if you\u2019re using virtual machines, you might have to enable the IS-IS daemon on R1. Log into the devices ( r1 and r2 ) with the netlab connect command.","title":"Start the Lab"},{"location":"basic/0-frrouting/#daemon","text":"Most network devices start routing daemons when you configure them through the configuration CLI or API. FRRouting is different. To start a routing daemon, you must enable the desired routing daemons in a configuration file and restart the top-level FRRouting process. You can check the FRR daemon processes running on your virtual machines with the sudo systemctl status frr.service command. It displays the running FRR daemons and the recent FRR logging messages, for example 2 : r2(bash)#sudo systemctl status frr.service \u25cf frr.service - FRRouting Loaded: loaded (/lib/systemd/system/frr.service; enabled; vendor preset: enabled) Active: active (running) since Wed 2024-07-17 17:09:27 UTC; 37s ago Docs: https://frrouting.readthedocs.io/en/latest/setup.html Process: 4051 ExecStart=/usr/lib/frr/frrinit.sh start (code=exited, status=0/SUCCESS) Main PID: 4071 (watchfrr) Status: \"FRR Operational\" Tasks: 1 (limit: 1049) Memory: 1.8M CGroup: /system.slice/frr.service \u2514\u25004071 /usr/lib/frr/watchfrr -d -F traditional zebra mgmtd isisd staticd Jul 17 17:09:27 r2 systemd[1]: Starting FRRouting... Jul 17 17:09:27 r2 frrinit.sh[4051]: * Starting watchfrr with command: ' /usr/lib/frr/watchfrr -d -F traditional zebra mgmtd > Jul 17 17:09:27 r2 watchfrr[4071]: [T83RR-8SM5G] watchfrr 10.0.1 starting: vty@0 Jul 17 17:09:27 r2 watchfrr[4071]: [QDG3Y-BY5TN] zebra state -> up : connect succeeded Jul 17 17:09:27 r2 watchfrr[4071]: [QDG3Y-BY5TN] mgmtd state -> up : connect succeeded Jul 17 17:09:27 r2 watchfrr[4071]: [QDG3Y-BY5TN] isisd state -> up : connect succeeded Jul 17 17:09:27 r2 watchfrr[4071]: [QDG3Y-BY5TN] staticd state -> up : connect succeeded Jul 17 17:09:27 r2 watchfrr[4071]: [KWE5Q-QNGFC] all daemons up, doing startup-complete notify Jul 17 17:09:27 r2 frrinit.sh[4051]: * Started watchfrr Jul 17 17:09:27 r2 systemd[1]: Started FRRouting. You cannot use the same command in FRRouting containers as they don\u2019t use systemd . The easiest way to find daemons in FRRouting containers is to use the ps -ef|grep frr command 3 . This is the printout you could get when the IS-IS daemon is already running: 1 root 0:00 /sbin/tini -- /usr/lib/frr/docker-start 7 root 0:00 {docker-start} /bin/bash /usr/lib/frr/docker-start 15 root 0:00 /usr/lib/frr/watchfrr zebra mgmtd isisd staticd 25 frr 0:00 /usr/lib/frr/zebra -d -F datacenter -A 127.0.0.1 -s 90000000 30 frr 0:00 /usr/lib/frr/mgmtd -d -F datacenter 32 frr 0:00 /usr/lib/frr/isisd -d -F datacenter -A 127.0.0.1 35 frr 0:00 /usr/lib/frr/staticd -d -F datacenter -A 127.0.0.1 366 root 0:00 grep frr The list of FRRouting daemons you want to enable is stored in the /etc/frr/daemons file. To enable the FRRouting IS-IS daemon, you have to: Add the isisd=yes line to the /etc/frr/daemons file 4 . Restart FRRouting with the sudo systemctl restart frr.service command (see also: using sudo ) Warning You cannot change the FRR daemons in FRR containers. Restarting FRR would kill the container. netlab takes care of that and enables all the daemons necessary to complete the lab exercises. Restarting FRR daemons wipes out the current (running) configuration. If you want to retain it, save it to the startup configuration with the vtysh write command. The write command saves the running configuration (that you can inspect with show running-config ) into the /etc/frr/frr.conf file. However, the show startup-config 5 does not display the content of that file. Exit vtysh and use the more /etc/frr/frr.conf command 6 to inspect it. You could add the required line to the FRRouting daemons file with any text editor 7 or use the following trick: Use sudo bash to start another Linux shell as the root user Use the echo command with output redirection to add a line to the /etc/frr/daemons file. rtr(bash)#sudo bash root@rtr:/# echo 'isis=yes' >>/etc/frr/daemons root@rtr:/# exit After enabling the IS-IS daemon and restarting FRR, you should see the isisd process in the ps -ef printout or the IS-IS daemon mentioned in the sudo systemctl status frr.service printout.","title":"Start the IS-IS Daemon"},{"location":"basic/0-frrouting/#vtysh","text":"FRRouting suite includes a virtual shell ( vtysh ) closely resembling industry-standard CLI 8 . It has to be started from the Linux command line with the vtysh command. The vtysh CLI has to run as the root user unless you change the FRR-related permissions to allow a regular user to use it. The usual command to start the vtysh is thus sudo vtysh (but see also To Sudo Or Not to Sudo ). r2(bash)#sudo vtysh Hello, this is FRRouting (version 9.1_git). Copyright 1996-2005 Kunihiro Ishiguro, et al. r2# Once you started vtysh , you can execute show commands to inspect the device state, for example: r2(bash)#sudo vtysh Hello, this is FRRouting (version 9.1_git). Copyright 1996-2005 Kunihiro Ishiguro, et al. r2# show ip route Codes: K - kernel route, C - connected, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, F - PBR, f - OpenFabric, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure C>* 10.0.0.2/32 is directly connected, lo, 00:02:26 C>* 10.1.0.0/30 is directly connected, eth1, 00:02:26 You can also use the --show option of the netlab connect command to execute a single command on a FRR/Cumulus Linux device[^UQ]. For example, to inspect the IS-IS topology database, use netlab connect --show isis database : $ netlab connect r2 --show isis database Connecting to container clab-frrouting-r2, executing vtysh -c \"show isis database\" Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r2.00-00 * 81 0x00000001 0xec86 1489 0/0/0 1 LSPs To configure FRRouting daemons, use the configure vtysh command and enter configuration commands similar to those you\u2019d use on Cisco IOS or Arista EOS: r2(bash)#vtysh Hello, this is FRRouting (version 9.1_git). Copyright 1996-2005 Kunihiro Ishiguro, et al. r2# configure r2(config)# router isis Gandalf r2(config-router)#","title":"Work with the FRRouting CLI"},{"location":"basic/0-frrouting/#sudo","text":"The vtysh usually has to run as the root user, so you should start it with the sudo vtysh command. Unfortunately, things are never as simple as they look in the Linux world: When using SSH, you log into Cumulus Linux or FRRouting virtual machines as a regular user (user vagrant in netlab -created labs) and have to use the sudo command to start vtysh . Cumulus Linux and FRR containers run as the root user, and you connect to them as the root user with the docker exec or netlab connect commands 9 . When working with containers, you can start vtysh without using the sudo command. You can execute sudo vtysh as a root user on Cumulus Linux containers but not within an FRR container. The FRR container does not include the sudo command. Long story short: Use sudo vtysh whenever possible to burn it into your muscle memory. Use vtysh if you use FRRouting containers as the lab devices.","title":"To Sudo Or Not to Sudo"},{"location":"basic/0-frrouting/#using-output-filters","text":"Unlike many other network operating systems, FRRouting vtysh does not have output filters. You probably don\u2019t need them as you\u2019ll be running FRR on top of a Unix-like operating system that supports pipes, but it might be a bit convoluted to use vtysh in a pipe. To use the vtysh output in a pipe, you have to execute vtysh and get the results of a show command in a single command: You could use sudo vtysh -c 'show command' when you\u2019re in the bash shell of a lab device, for example: r2(bash)#vtysh -c 'show isis database'|grep r2 r2.00-00 * 81 0x00000001 0xec86 1302 0/0/0 Alternatively, you could use the netlab connect --show command to execute a vtysh show command on a lab device: $ netlab connect r2 -q --show isis database|grep r2 r2.00-00 * 81 0x00000001 0xec86 1286 0/0/0 Tip Use netlab connect --quiet --show to omit the Connecting to... message. The following table contains a mapping between common network operating system filters and Linux CLI commands: NOS filter Linux CLI command include grep exclude grep -v begin grep -A 10000 10 end grep -B 10000 section no equivalent Including devices based on Linux like Arista EOS, Cisco Nexus OS, or Nokia SR Linux \u21a9 The printout details depend on the Linux and FRR versions, but you\u2019ll always be able to determine whether the IS-IS process is running. \u21a9 You can use the same command with FRRouting running in a virtual machine. \u21a9 See Configuring FRRouting Cumulus Linux documentation for more details. \u21a9 At least on FRRouting version 9.1 and earlier \u21a9 You might have to prefix it with sudo \u21a9 vi is available in Cumulus Linux containers. vi and nano are available in Cumulus Linux and FRR virtual machines. \u21a9 An euphemism for Cisco IOS CLI that is used when you try to avoid nasty encounters with Cisco\u2019s legal team. \u21a9 When in doubt, use the whoami command. \u21a9 The \u201810000\u2019 parameter specifies the number of lines after the match. Increase it for very long printouts ;) \u21a9","title":"Using Output Filters"},{"location":"basic/1-simple-ipv4/","text":"Configure IS-IS Routing for IPv4 We\u2019ll start with the simplest possible scenario: we\u2019re adding a new router to an existing IS-IS network and have to configure IS-IS routing on it. Device Requirements Use any netlab -supported device for the router you\u2019ll be configuring. Use a device supported by the netlab IS-IS configuration module for X1 and X2 (default: FRRouting virtual machines or containers). You can do automated lab validation when using FRRouting on the external routers. Starting the Lab Assuming you already set up your lab infrastructure : Change directory to basic/1-simple-ipv4 Execute netlab up Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces. Configuration Tasks The minimal IS-IS configuration process has three or four steps: Start an IS-IS routing process with a global configuration command similar to router is-is . You might have to specify a routing process tag \u2013 usually a meaningless string, considering that many network devices can\u2019t run more than one IS-IS instance. Assign a CLNS address (NET \u2013 Network Entity Title) to the IS-IS routing process with a routing configuration command similar to net address ( more details ). The NET assigned to your router is 49.0001.0000.0000.0042.00 Some devices want you to configure which address families (IPv4 or IPv6) you want to route with IS-IS. The router configuration command to do that is often address-family ipv4 . Enable IS-IS routing for IPv4 on individual interfaces with an interface configuration command similar to ip router isis tag or isis enable tag . Tip If you\u2019re using FRRouting on RTR, you might have to enable the IS-IS daemon first. You\u2019ll find more details in the Configuring IS-IS on FRRouting lab. Unfortunately, most IS-IS implementations are ancient and use defaults that might have made sense decades ago. You should also configure the following parameters 1 : Configure the links with two nodes attached to them as point-to-point links with an interface configuration command similar to isis network point-to-point . Configure your router to be a Level-2-Only router with the router configuration command similar to is-type level-2-only . Finally, make sure your configuration includes these settings: Logging of adjacency changes (typically configured with a router configuration command like log-adjacency-changes ) Dynamic mapping of NETs to hostnames (usually enabled; sometimes you can\u2019t turn it off) Validation You can use the netlab validate command if you\u2019re using netlab release 1.8.4 or later and run FRRouting on the external routers. This is the printout you should get after completing the lab exercise: You should also do basic validation on your device: Inspect IS-IS adjacencies with a command similar to show isis neighbors . Your router should have level-2 adjacencies with X1 and X2; this is the printout you should get on Arista EOS: rtr#show isis neighbors rtr# show isis neighbor Area SomeTag: System Id Interface L State Holdtime SNPA x1 eth1 2 Up 29 2020.2020.2020 x2 eth2 2 Up 30 2020.2020.2020 Inspect the IP routing table and verify that you can see three loopback prefixes (10.0.0.1/32 through 10.0.0.3/32). This is the printout you should get on FRRouting rtr# show ip route isis Codes: K - kernel route, C - connected, L - local, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, F - PBR, f - OpenFabric, t - Table-Direct, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure I>* 10.0.0.2/32 [115/20] via 10.1.0.2, eth1, weight 1, 00:00:47 I>* 10.0.0.3/32 [115/20] via 10.1.0.6, eth2, weight 1, 00:00:18 I 10.1.0.0/30 [115/20] via 10.1.0.2, eth1 inactive, weight 1, 00:00:47 I 10.1.0.4/30 [115/20] via 10.1.0.6, eth2 inactive, weight 1, 00:00:18 FRRouting uses the IP routing table as the repository of all routes , not just the best routes , so it displays the inactive IS-IS routes. Other network devices, for example Arista EOS 2 , display just the active IS-IS routes: rtr#show ip route isis detail|begin Priority Priority Codes: PL - Priority low, PM - Priority medium, PH - Priority high I L2 10.0.0.2/32 [115/20] via 10.1.0.2, Ethernet1 rtr -> x1 I L2 10.0.0.3/32 [115/20] via 10.1.0.6, Ethernet2 rtr -> x2 Next: Explore IS-IS Data Structures . That lab uses the same topology and device configurations, so you can keep going without restarting the lab. Background Information IS-IS was designed to be the routing protocol for the ISO/OSI protocol stack. Its name is derived from ISO terminology: IS stands for Intermediate System (the device also known as router , gateway or layer-3 switch ). Thus, IS-IS is the protocol that runs between Intermediate Systems. While ISO designed IS-IS to be used with CLNP, its data structures (everything is CLV 3 -based) made it easy to extend, and so IETF quickly specified how to use IS-IS for IPv4 and (later) IPv6 routing. IS-IS does not run on top of another layer-3 protocol like OSPF or BGP run on top of IP; it uses a separate layer-3 protocol and a dedicated 802.1 SAP . You cannot use the standard IP access control mechanisms with IS-IS; on the other hand, it\u2019s impossible to spoof IS-IS messages if the intruder does not have access to the underlying layer-2 infrastructure. IS-IS addressing follows the OSI addressing principles. Network addresses (Network Service Access Points \u2013 NSAPs) are assigned to nodes , not interfaces . OSI protocol suite used variable-length addresses, and according to the ( poorly formatted copy of ) IS-IS specifications, the NET is split into three parts: +--------+-----------+----+ | Area | System-ID | NS | +--------+-----------+----+ The NSAP Selector specifies the software entity on the node that should receive the packet (similar to the TCP/UDP/OSPF protocol type within the IPv4 header). IS-IS uses NSAP selector value zero and calls the resulting address Network Entity Title (NET). Thus, the last byte of NET always has to be zero. The System ID (node address within an area, similar to the subnet part of an IP address) is one to eight bytes long. Subsequent parts of IS-IS specification assume a 6-byte System ID (12 hexadecimal characters), and that\u2019s what all implementations use. The Area is whatever is left on the left-hand side of the NET after you take away the rightmost seven bytes. The NET is usually formatted as a hexadecimal string (two hexadecimal digits per byte) with two-byte portions (four hexadecimal digits) separated by a dot. The placement of dots is a bit counterintuitive: The rightmost dot has to be between the System ID and NSAP Selector. Subsequent dots have to be four characters left of the previous dot, resulting in two dots within the System ID and a dot between the node System ID and the IS-IS area. For example, the NET we used in this lab ( 49000100000000004200 )has to be written as 49.0001.0000.0000.0042.00 . The area address could have any length 4 as long as it\u2019s specified as a whole number of bytes (an even number of digits). IS-IS doesn\u2019t care about the contents of the area address. If two routers have the value in that part of the NET, they belong to the same area; if not, they don\u2019t. Finally, other ISO standards define the meaning of the leftmost part of a network address (NSAP). The first (leftmost) byte is the Authority and Format Identifier (AFI), and the value 49 indicates private address space (similar to RFC 1918 IPv4 address space) (see RFC 1629 for more details). Using two bytes as the area ID usually makes sense, and that\u2019s why most NETs you find in online examples start with 49.0001 ;) Reference Information Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 eth1 rtr Ethernet2 x2 eth1 Note: The interface names depend on the devices you use in the lab. The printout was generated with Arista EOS running on RTR and FRRouting running on X1 and X2. Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.2/32 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 10.0.0.3/32 Loopback eth1 10.1.0.6/30 x2 -> rtr Trust me for the moment; we\u2019ll discuss them in great detail in subsequent lab exercises. \u21a9 The detail option of the show ip route command includes the interface description, and the |begin Priority output filter removes the legend. \u21a9 Code/Length/Value: every bit of information starts with a code (one byte), followed by length (one byte) and the actual value. This encoding approach is more commonly called TLV (Type/Length/Value). \u21a9 There must be some upper limit. \u21a9","title":"Configure IS-IS Routing for IPv4"},{"location":"basic/1-simple-ipv4/#configure-is-is-routing-for-ipv4","text":"We\u2019ll start with the simplest possible scenario: we\u2019re adding a new router to an existing IS-IS network and have to configure IS-IS routing on it.","title":"Configure IS-IS Routing for IPv4"},{"location":"basic/1-simple-ipv4/#device-requirements","text":"Use any netlab -supported device for the router you\u2019ll be configuring. Use a device supported by the netlab IS-IS configuration module for X1 and X2 (default: FRRouting virtual machines or containers). You can do automated lab validation when using FRRouting on the external routers.","title":"Device Requirements"},{"location":"basic/1-simple-ipv4/#starting-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/1-simple-ipv4 Execute netlab up Log into your device (RTR) with netlab connect rtr and verify that the IP addresses are configured on all its interfaces.","title":"Starting the Lab"},{"location":"basic/1-simple-ipv4/#configuration-tasks","text":"The minimal IS-IS configuration process has three or four steps: Start an IS-IS routing process with a global configuration command similar to router is-is . You might have to specify a routing process tag \u2013 usually a meaningless string, considering that many network devices can\u2019t run more than one IS-IS instance. Assign a CLNS address (NET \u2013 Network Entity Title) to the IS-IS routing process with a routing configuration command similar to net address ( more details ). The NET assigned to your router is 49.0001.0000.0000.0042.00 Some devices want you to configure which address families (IPv4 or IPv6) you want to route with IS-IS. The router configuration command to do that is often address-family ipv4 . Enable IS-IS routing for IPv4 on individual interfaces with an interface configuration command similar to ip router isis tag or isis enable tag . Tip If you\u2019re using FRRouting on RTR, you might have to enable the IS-IS daemon first. You\u2019ll find more details in the Configuring IS-IS on FRRouting lab. Unfortunately, most IS-IS implementations are ancient and use defaults that might have made sense decades ago. You should also configure the following parameters 1 : Configure the links with two nodes attached to them as point-to-point links with an interface configuration command similar to isis network point-to-point . Configure your router to be a Level-2-Only router with the router configuration command similar to is-type level-2-only . Finally, make sure your configuration includes these settings: Logging of adjacency changes (typically configured with a router configuration command like log-adjacency-changes ) Dynamic mapping of NETs to hostnames (usually enabled; sometimes you can\u2019t turn it off)","title":"Configuration Tasks"},{"location":"basic/1-simple-ipv4/#validation","text":"You can use the netlab validate command if you\u2019re using netlab release 1.8.4 or later and run FRRouting on the external routers. This is the printout you should get after completing the lab exercise: You should also do basic validation on your device: Inspect IS-IS adjacencies with a command similar to show isis neighbors . Your router should have level-2 adjacencies with X1 and X2; this is the printout you should get on Arista EOS: rtr#show isis neighbors rtr# show isis neighbor Area SomeTag: System Id Interface L State Holdtime SNPA x1 eth1 2 Up 29 2020.2020.2020 x2 eth2 2 Up 30 2020.2020.2020 Inspect the IP routing table and verify that you can see three loopback prefixes (10.0.0.1/32 through 10.0.0.3/32). This is the printout you should get on FRRouting rtr# show ip route isis Codes: K - kernel route, C - connected, L - local, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, F - PBR, f - OpenFabric, t - Table-Direct, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure I>* 10.0.0.2/32 [115/20] via 10.1.0.2, eth1, weight 1, 00:00:47 I>* 10.0.0.3/32 [115/20] via 10.1.0.6, eth2, weight 1, 00:00:18 I 10.1.0.0/30 [115/20] via 10.1.0.2, eth1 inactive, weight 1, 00:00:47 I 10.1.0.4/30 [115/20] via 10.1.0.6, eth2 inactive, weight 1, 00:00:18 FRRouting uses the IP routing table as the repository of all routes , not just the best routes , so it displays the inactive IS-IS routes. Other network devices, for example Arista EOS 2 , display just the active IS-IS routes: rtr#show ip route isis detail|begin Priority Priority Codes: PL - Priority low, PM - Priority medium, PH - Priority high I L2 10.0.0.2/32 [115/20] via 10.1.0.2, Ethernet1 rtr -> x1 I L2 10.0.0.3/32 [115/20] via 10.1.0.6, Ethernet2 rtr -> x2 Next: Explore IS-IS Data Structures . That lab uses the same topology and device configurations, so you can keep going without restarting the lab.","title":"Validation"},{"location":"basic/1-simple-ipv4/#bg","text":"IS-IS was designed to be the routing protocol for the ISO/OSI protocol stack. Its name is derived from ISO terminology: IS stands for Intermediate System (the device also known as router , gateway or layer-3 switch ). Thus, IS-IS is the protocol that runs between Intermediate Systems. While ISO designed IS-IS to be used with CLNP, its data structures (everything is CLV 3 -based) made it easy to extend, and so IETF quickly specified how to use IS-IS for IPv4 and (later) IPv6 routing. IS-IS does not run on top of another layer-3 protocol like OSPF or BGP run on top of IP; it uses a separate layer-3 protocol and a dedicated 802.1 SAP . You cannot use the standard IP access control mechanisms with IS-IS; on the other hand, it\u2019s impossible to spoof IS-IS messages if the intruder does not have access to the underlying layer-2 infrastructure. IS-IS addressing follows the OSI addressing principles. Network addresses (Network Service Access Points \u2013 NSAPs) are assigned to nodes , not interfaces . OSI protocol suite used variable-length addresses, and according to the ( poorly formatted copy of ) IS-IS specifications, the NET is split into three parts: +--------+-----------+----+ | Area | System-ID | NS | +--------+-----------+----+ The NSAP Selector specifies the software entity on the node that should receive the packet (similar to the TCP/UDP/OSPF protocol type within the IPv4 header). IS-IS uses NSAP selector value zero and calls the resulting address Network Entity Title (NET). Thus, the last byte of NET always has to be zero. The System ID (node address within an area, similar to the subnet part of an IP address) is one to eight bytes long. Subsequent parts of IS-IS specification assume a 6-byte System ID (12 hexadecimal characters), and that\u2019s what all implementations use. The Area is whatever is left on the left-hand side of the NET after you take away the rightmost seven bytes. The NET is usually formatted as a hexadecimal string (two hexadecimal digits per byte) with two-byte portions (four hexadecimal digits) separated by a dot. The placement of dots is a bit counterintuitive: The rightmost dot has to be between the System ID and NSAP Selector. Subsequent dots have to be four characters left of the previous dot, resulting in two dots within the System ID and a dot between the node System ID and the IS-IS area. For example, the NET we used in this lab ( 49000100000000004200 )has to be written as 49.0001.0000.0000.0042.00 . The area address could have any length 4 as long as it\u2019s specified as a whole number of bytes (an even number of digits). IS-IS doesn\u2019t care about the contents of the area address. If two routers have the value in that part of the NET, they belong to the same area; if not, they don\u2019t. Finally, other ISO standards define the meaning of the leftmost part of a network address (NSAP). The first (leftmost) byte is the Authority and Format Identifier (AFI), and the value 49 indicates private address space (similar to RFC 1918 IPv4 address space) (see RFC 1629 for more details). Using two bytes as the area ID usually makes sense, and that\u2019s why most NETs you find in online examples start with 49.0001 ;)","title":"Background Information"},{"location":"basic/1-simple-ipv4/#reference-information","text":"","title":"Reference Information"},{"location":"basic/1-simple-ipv4/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 eth1 rtr Ethernet2 x2 eth1 Note: The interface names depend on the devices you use in the lab. The printout was generated with Arista EOS running on RTR and FRRouting running on X1 and X2.","title":"Lab Wiring"},{"location":"basic/1-simple-ipv4/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.2/32 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 10.0.0.3/32 Loopback eth1 10.1.0.6/30 x2 -> rtr Trust me for the moment; we\u2019ll discuss them in great detail in subsequent lab exercises. \u21a9 The detail option of the show ip route command includes the interface description, and the |begin Priority output filter removes the legend. \u21a9 Code/Length/Value: every bit of information starts with a code (one byte), followed by length (one byte) and the actual value. This encoding approach is more commonly called TLV (Type/Length/Value). \u21a9 There must be some upper limit. \u21a9","title":"Lab Addressing"},{"location":"basic/2-explore/","text":"Explore IS-IS Data Structures You\u2019ll explore IS-IS adjacencies and the IS-IS topology database in this lab. We\u2019ll use the topology from the Configure IS-IS Routing for IPv4 lab exercise: Device Requirements Use any device supported by the netlab IS-IS configuration module . Starting the Lab Assuming you already set up your lab infrastructure : Change directory to basic/2-explore Execute netlab up Log into your device (RTR) with netlab connect rtr Explore Router Configuration Unless you\u2019re absolutely sure how your router is configured, always start with a high-level overview of IS-IS settings, usually displayed with a command like show isis summary . The most significant bits of information include: NET , which can be split into area and system ID . Some devices display NET; others display the IS-IS area and the system ID as independent components. The address families (IPv4, IPv6) Router type: intra-area router (level-1), inter-area router (level-2) or multi-level router 1 (level-1-2). Try to find the above information in the printout produced by FRRouting and Arista cEOS: Basic IS-IS information displayed by FRRouting $ netlab connect rtr --show isis summary vrf : default Process Id : 32 System Id : 0000.0000.0001 Up time : 00:00:15 ago Number of areas : 1 Area Gandalf: Net: 49.0001.0000.0000.0001.00 TX counters per PDU type: L2 IIH: 2 P2P IIH: 14 L2 LSP: 8 L2 CSNP: 4 L2 PSNP: 4 LSP RXMT: 0 RX counters per PDU type: P2P IIH: 14 L2 LSP: 4 L2 CSNP: 4 L2 PSNP: 4 Drop counters per PDU type: Advertise high metrics: Disabled Level-2: LSP0 regenerated: 2 LSPs purged: 0 SPF: minimum interval : 1 IPv4 route computation: last run elapsed : 00:00:13 ago last run duration : 152 usec run count : 2 Basic IS-IS information displayed by Arista cEOS rtr>show isis summary IS-IS Instance: Gandalf VRF: default Instance ID: 0 System ID: 0000.0000.0001, administratively enabled Router ID: IPv4: 10.0.0.1 Hostname: rtr Multi Topology disabled, not attached IPv4 Preference: Level 1: 115, Level 2: 115 IPv6 Preference: Level 1: 115, Level 2: 115 IS-Type: Level 2, Number active interfaces: 3 Routes IPv4 only LSP size maximum: Level 1: 1492, Level 2: 1492 Interval Type Max Wait Initial Wait Hold Interval ----------------------- -------- ------------ ------------- LSP generation interval 5 s 50 ms 50 ms SPF interval 2000 ms 1000 ms 1000 ms Current SPF hold interval(ms): Level 1: 0, Level 2: 2000 Last Level 2 SPF run 7 seconds ago CSNP generation interval: 10 seconds Dynamic Flooding: Disabled Authentication mode: Level 1: None, Level 2: None Graceful Restart: Disabled, Graceful Restart Helper: Enabled Area addresses: 49.0001 level 2: number DIS interfaces: 0, LSDB size: 3 Area Leader: None Overload Bit is not set. Redistributed Level 1 routes: 0 limit: Not Configured Redistributed Level 2 routes: 0 limit: Not Configured Explore IS-IS Adjacencies IS-IS high-level principles are similar to OSPF ones: A hello protocol is used to discover neighbors (unlike OSPF, which uses IP, IS-IS uses a dedicated layer-3 protocol). Once the neighbors are discovered, an adjacency is established with them. Neighbors exchange their topology database information and any missing topology database records. Examining IS-IS neighbors is thus the next logical step after examining the local IS-IS parameters; the command to use is often show isis neighbor . You should be looking for the following information: The local interface Neighbor name or system ID. Most modern IS-IS implementations display neighbor names 2 . The state of adjacency (it should be Up on point-to-point links) The type of adjacency: intra-area adjacency (level-1), inter-area adjacency (level-2) or multi-level adjacency (level-1-2) 4 . Remote MAC address (SNPA 3 ). The remote MAC address is sometimes displayed as 2020.2020.2020 on point-to-point links. Tip All routers in your lab are configured as level-2 routers and should have only level-2 adjacencies. Try to extract the above information from the printouts generated by FRRouting and Arista cEOS: IS-IS neighbors displayed by FRRouting $ netlab connect rtr --show isis neighbor Area Gandalf: System Id Interface L State Holdtime SNPA x1 eth1 2 Up 29 2020.2020.2020 x2 eth2 2 Up 29 2020.2020.2020 IS-IS neighbors displayed by Arista cEOS rtr>show isis neighbors Instance VRF System Id Type Interface SNPA State Hold time Circuit Id Gandalf default x1 L2 Ethernet1 P2P UP 29 00 Gandalf default x2 L2 Ethernet2 P2P UP 29 00 Sometimes, you have to dig deeper and display neighbor details; a typical command to display those details is show isis neighbor detail . The details include: The address families supported by the neighbor (IPv4, IPv6) Neighbor\u2019s area address and interface IPv4/IPv6 address. Neighbor health statistics, including the number of flaps and the remaining hold timer. Extract the above information from the printouts generated by FRRouting and Arista cEOS. The IS-IS neighbor details displayed by FRRouting $ netlab connect rtr --show isis neighbor detail Area Gandalf: x1 Interface: eth1, Level: 2, State: Up, Expires in 28s Adjacency flaps: 1, Last: 1m22s ago Circuit type: L2, Speaks: IPv4 SNPA: 2020.2020.2020 Area Address(es): 49.0001 IPv4 Address(es): 10.1.0.2 x2 Interface: eth2, Level: 2, State: Up, Expires in 27s Adjacency flaps: 1, Last: 1m22s ago Circuit type: L2, Speaks: IPv4 SNPA: 2020.2020.2020 Area Address(es): 49.0001 IPv4 Address(es): 10.1.0.6 The IS-IS neighbor details displayed by Arista cEOS rtr>show isis neighbors detail Instance VRF System Id Type Interface SNPA State Hold time Circuit Id Gandalf default x1 L2 Ethernet1 P2P UP 29 00 Area addresses: 49.0001 SNPA: P2P Router ID: 0.0.0.0 Advertised Hold Time: 30 State Changed: 00:02:19 ago at 2024-08-08 10:46:49 IPv4 Interface Address: 10.1.0.2 IPv6 Interface Address: none Interface name: Ethernet1 Graceful Restart: Not Supported Supported Address Families: IPv4 Neighbor Supported Address Families: IPv4 Explore IS-IS Database Like OSPF, IS-IS uses a topology database \u2013 a distributed, eventually consistent database shared among all routers in an area or among all inter-area routers. Unlike OSPF, where an ABR could have topology information for multiple areas, IS-IS uses a simpler two-level approach: Routers participating in intra-area routing (level-1 and level-1-2 routers) share a level-1 link-state database containing intra-area topology and prefixes. Level-1-2 and level-2 routers (inter-area routers) share a level-2 link-state database containing inter-area topology and prefixes from all IS-IS areas. Tip All routers in your lab are configured as level-2 routers and thus share only the level-2 link-state database 5 . OSPF stores various bits of topology information in multiple types of Link State Advertisements (LSA). IS-IS stores all information generated by a single router in a single Link State Information Packet (LSP) unless it has too much information for a single LSP, in which case it generates multiple LSP fragments ( more details ). Tip IS-IS cannot fragment LSPs in transit; the maximum LSP size must never exceed the lowest MTU of any link in the IS-IS network. IS-IS contains no mechanism to dynamically detect the minimum network-wide MTU; you have to set the maximum LSP size with a router configuration command similar to lsp-mtu . The identifier of an IS-IS LSP is always in the format router-id.lsp-id.fragment-id . The router-id is the NET (although you can usually use hostnames), the lsp-id becomes relevant on multi-access links (we\u2019ll get there in another lab exercise), and the fragment-id is the sequence number of the LSP fragment. You can inspect the IS-IS topology database with a command similar to show isis database . The short printout usually lists the LSPs (their ID), the LSP length, their sequence number, and their remaining lifetime. Tip A quickly increasing LSP sequence number might indicate routing instabilities. The IS-IS topology database overview displayed by FRRouting $ netlab connect rtr --show isis database Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL rtr.00-00 * 113 0x00000002 0x902e 1626 0/0/0 x1.00-00 92 0x00000002 0x23a0 1659 0/0/0 x2.00-00 92 0x00000002 0xc8f0 1633 0/0/0 3 LSPs The IS-IS topology database overview displayed by Arista cEOS rtr>show isis database Legend: H - hostname conflict U - node unreachable IS-IS Instance: Gandalf VRF: default IS-IS Level 2 Link State Database LSPID Seq Num Cksum Life Length IS Received LSPID Flags rtr.00-00 2 26795 1042 119 L2 0000.0000.0001.00-00 <> x1.00-00 2 9120 1610 92 L2 0000.0000.0002.00-00 <> x2.00-00 2 51440 1610 92 L2 0000.0000.0003.00-00 <> You can inspect the contents of an IS-IS LSP with a command similar to show isis database detail . Each IS-IS LSP contains numerous data items encoded as Type-Length-Value triplets. The TLV values are usually displayed in a human-friendly format; you\u2019d have to use a packet capture tool like tcpdump or wireshark to see the dirty details. The recognized IS-IS data types are collected in the IANA IS-IS TLV Codepoints registry; you\u2019d usually see the following TLVs in a modern IPv4 network: TLV Description 1 Area address 137 Hostname 242 Router capabilities 129 Supported protocols (IPv4/IPv6) 22 Extended IS Reachability 6 The cost to reach adjacent routers 132 IPv4 Interface Address 135 IPv4 Extended Reachability The cost of a connected prefix This is how FRRouting and Arista cEOS display the LSP information: LSP content displayed by FRRouting $ netlab connect rtr --show isis database detail rtr.00-00 Connecting to container clab-explore-rtr, executing vtysh -c \"show isis database detail rtr.00-00\" Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL rtr.00-00 * 113 0x00000002 0x902e 1589 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 Hostname: rtr TE Router ID: 10.0.0.1 Router Capability: 10.0.0.1 , D:0, S:0 Extended Reachability: 0000.0000.0002.00 (Metric: 10) Extended Reachability: 0000.0000.0003.00 (Metric: 10) IPv4 Interface Address: 10.0.0.1 Extended IP Reachability: 10.0.0.1/32 (Metric: 10) Extended IP Reachability: 10.1.0.0/30 (Metric: 10) Extended IP Reachability: 10.1.0.4/30 (Metric: 10) LSP content displayed by Arista EOS rtr>show isis database rtr.00-00 detail Legend: H - hostname conflict U - node unreachable IS-IS Instance: Gandalf VRF: default IS-IS Level 2 Link State Database LSPID Seq Num Cksum Life Length IS Received LSPID Flags rtr.00-00 2 26795 1001 119 L2 0000.0000.0001.00-00 <> LSP generation remaining wait time: 0 ms Time remaining until refresh: 701 s NLPID: 0xCC(IPv4) Hostname: rtr Area addresses: 49.0001 Interface address: 10.1.0.5 Interface address: 10.1.0.1 Interface address: 10.0.0.1 IS Neighbor : x1.00 Metric: 10 IS Neighbor : x2.00 Metric: 10 Reachability : 10.1.0.4/30 Metric: 10 Type: 1 Up Reachability : 10.1.0.0/30 Metric: 10 Type: 1 Up Reachability : 10.0.0.1/32 Metric: 10 Type: 1 Up Router Capabilities: Router Id: 10.0.0.1 Flags: [] Area leader priority: 250 algorithm: 0 The LSP information is used to build a topology graph that the SPF algorithm uses to find the lowest cost path to every known IP prefix: The LSPs are nodes in the topology graph The \u200cExtended IS Reachability TLV describes the unidirectional links in the topology graph The Extended IP Reachability TLVs describe leaf nodes (IP prefixes) attached to the LSPs In the first phase, the SPF algorithm finds the shortest path to every LSP in the topology graph; in the second phase, it finds the minimum cost path toward every prefix advertised by other routers. LSP Fragments You rarely see LSP fragments in small networks, but it\u2019s pretty easy to generate them by lowering the maximum LSP size. For example, if we reduce the LSP size on rtr to 256, we\u2019ll get two fragments: rtr# show isis database Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL rtr.00-00 * 67 0x00000024 0xe3a6 1648 0/0/0 rtr.00-01 * 75 0x00000006 0xa54b 1648 0/0/0 x1.00-00 92 0x00000017 0xf8b5 1288 0/0/0 x2.00-00 92 0x00000018 0x9c07 1043 0/0/0 The LSP fragments contain the same information as the original LSP, only split across multiple smaller database objects: rtr# show isis database detail rtr.00-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL rtr.00-00 * 67 0x00000024 0xe3a6 1590 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 Hostname: rtr TE Router ID: 10.0.0.1 Router Capability: 10.0.0.1 , D:0, S:0 Extended Reachability: 0000.0000.0002.00 (Metric: 10) rtr# show isis database detail rtr.00-01 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL rtr.00-01 * 75 0x00000006 0xa54b 1589 0/0/0 Extended Reachability: 0000.0000.0003.00 (Metric: 10) IPv4 Interface Address: 10.0.0.1 Extended IP Reachability: 10.0.0.1/32 (Metric: 10) Extended IP Reachability: 10.1.0.0/30 (Metric: 10) Extended IP Reachability: 10.1.0.4/30 (Metric: 10) Next: IS-IS on Point-to-Point Links Reference Information Lab Wiring Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 eth1 rtr Ethernet2 x2 eth1 Note: The interface names depend on the devices you use in the lab. The printout was generated with Arista EOS running on RTR and FRRouting running on X1 and X2. Lab Addressing Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.2/32 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 10.0.0.3/32 Loopback eth1 10.1.0.6/30 x2 -> rtr Similar, but not exactly equivalent to OSPF ABR \u21a9 Router names are advertised using the Dynamic Hostname TLV defined in RFC 5301 . \u21a9 Subnetwork point of attachment \u2013 a fancy OSI name for a MAC address. \u21a9 We\u2019re using level-2-only routers in the initial lab exercises. We\u2019ll explore multi-level routing in one of the more advanced exercises. \u21a9 We\u2019ll cover multi-level IS-IS routing in another lab exercise. \u21a9 Also known as Wide Metrics (covered in another lab exercise). \u21a9","title":"Explore IS-IS Data Structures"},{"location":"basic/2-explore/#explore-is-is-data-structures","text":"You\u2019ll explore IS-IS adjacencies and the IS-IS topology database in this lab. We\u2019ll use the topology from the Configure IS-IS Routing for IPv4 lab exercise:","title":"Explore IS-IS Data Structures"},{"location":"basic/2-explore/#device-requirements","text":"Use any device supported by the netlab IS-IS configuration module .","title":"Device Requirements"},{"location":"basic/2-explore/#starting-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/2-explore Execute netlab up Log into your device (RTR) with netlab connect rtr","title":"Starting the Lab"},{"location":"basic/2-explore/#explore-router-configuration","text":"Unless you\u2019re absolutely sure how your router is configured, always start with a high-level overview of IS-IS settings, usually displayed with a command like show isis summary . The most significant bits of information include: NET , which can be split into area and system ID . Some devices display NET; others display the IS-IS area and the system ID as independent components. The address families (IPv4, IPv6) Router type: intra-area router (level-1), inter-area router (level-2) or multi-level router 1 (level-1-2). Try to find the above information in the printout produced by FRRouting and Arista cEOS: Basic IS-IS information displayed by FRRouting $ netlab connect rtr --show isis summary vrf : default Process Id : 32 System Id : 0000.0000.0001 Up time : 00:00:15 ago Number of areas : 1 Area Gandalf: Net: 49.0001.0000.0000.0001.00 TX counters per PDU type: L2 IIH: 2 P2P IIH: 14 L2 LSP: 8 L2 CSNP: 4 L2 PSNP: 4 LSP RXMT: 0 RX counters per PDU type: P2P IIH: 14 L2 LSP: 4 L2 CSNP: 4 L2 PSNP: 4 Drop counters per PDU type: Advertise high metrics: Disabled Level-2: LSP0 regenerated: 2 LSPs purged: 0 SPF: minimum interval : 1 IPv4 route computation: last run elapsed : 00:00:13 ago last run duration : 152 usec run count : 2 Basic IS-IS information displayed by Arista cEOS rtr>show isis summary IS-IS Instance: Gandalf VRF: default Instance ID: 0 System ID: 0000.0000.0001, administratively enabled Router ID: IPv4: 10.0.0.1 Hostname: rtr Multi Topology disabled, not attached IPv4 Preference: Level 1: 115, Level 2: 115 IPv6 Preference: Level 1: 115, Level 2: 115 IS-Type: Level 2, Number active interfaces: 3 Routes IPv4 only LSP size maximum: Level 1: 1492, Level 2: 1492 Interval Type Max Wait Initial Wait Hold Interval ----------------------- -------- ------------ ------------- LSP generation interval 5 s 50 ms 50 ms SPF interval 2000 ms 1000 ms 1000 ms Current SPF hold interval(ms): Level 1: 0, Level 2: 2000 Last Level 2 SPF run 7 seconds ago CSNP generation interval: 10 seconds Dynamic Flooding: Disabled Authentication mode: Level 1: None, Level 2: None Graceful Restart: Disabled, Graceful Restart Helper: Enabled Area addresses: 49.0001 level 2: number DIS interfaces: 0, LSDB size: 3 Area Leader: None Overload Bit is not set. Redistributed Level 1 routes: 0 limit: Not Configured Redistributed Level 2 routes: 0 limit: Not Configured","title":"Explore Router Configuration"},{"location":"basic/2-explore/#explore-is-is-adjacencies","text":"IS-IS high-level principles are similar to OSPF ones: A hello protocol is used to discover neighbors (unlike OSPF, which uses IP, IS-IS uses a dedicated layer-3 protocol). Once the neighbors are discovered, an adjacency is established with them. Neighbors exchange their topology database information and any missing topology database records. Examining IS-IS neighbors is thus the next logical step after examining the local IS-IS parameters; the command to use is often show isis neighbor . You should be looking for the following information: The local interface Neighbor name or system ID. Most modern IS-IS implementations display neighbor names 2 . The state of adjacency (it should be Up on point-to-point links) The type of adjacency: intra-area adjacency (level-1), inter-area adjacency (level-2) or multi-level adjacency (level-1-2) 4 . Remote MAC address (SNPA 3 ). The remote MAC address is sometimes displayed as 2020.2020.2020 on point-to-point links. Tip All routers in your lab are configured as level-2 routers and should have only level-2 adjacencies. Try to extract the above information from the printouts generated by FRRouting and Arista cEOS: IS-IS neighbors displayed by FRRouting $ netlab connect rtr --show isis neighbor Area Gandalf: System Id Interface L State Holdtime SNPA x1 eth1 2 Up 29 2020.2020.2020 x2 eth2 2 Up 29 2020.2020.2020 IS-IS neighbors displayed by Arista cEOS rtr>show isis neighbors Instance VRF System Id Type Interface SNPA State Hold time Circuit Id Gandalf default x1 L2 Ethernet1 P2P UP 29 00 Gandalf default x2 L2 Ethernet2 P2P UP 29 00 Sometimes, you have to dig deeper and display neighbor details; a typical command to display those details is show isis neighbor detail . The details include: The address families supported by the neighbor (IPv4, IPv6) Neighbor\u2019s area address and interface IPv4/IPv6 address. Neighbor health statistics, including the number of flaps and the remaining hold timer. Extract the above information from the printouts generated by FRRouting and Arista cEOS. The IS-IS neighbor details displayed by FRRouting $ netlab connect rtr --show isis neighbor detail Area Gandalf: x1 Interface: eth1, Level: 2, State: Up, Expires in 28s Adjacency flaps: 1, Last: 1m22s ago Circuit type: L2, Speaks: IPv4 SNPA: 2020.2020.2020 Area Address(es): 49.0001 IPv4 Address(es): 10.1.0.2 x2 Interface: eth2, Level: 2, State: Up, Expires in 27s Adjacency flaps: 1, Last: 1m22s ago Circuit type: L2, Speaks: IPv4 SNPA: 2020.2020.2020 Area Address(es): 49.0001 IPv4 Address(es): 10.1.0.6 The IS-IS neighbor details displayed by Arista cEOS rtr>show isis neighbors detail Instance VRF System Id Type Interface SNPA State Hold time Circuit Id Gandalf default x1 L2 Ethernet1 P2P UP 29 00 Area addresses: 49.0001 SNPA: P2P Router ID: 0.0.0.0 Advertised Hold Time: 30 State Changed: 00:02:19 ago at 2024-08-08 10:46:49 IPv4 Interface Address: 10.1.0.2 IPv6 Interface Address: none Interface name: Ethernet1 Graceful Restart: Not Supported Supported Address Families: IPv4 Neighbor Supported Address Families: IPv4","title":"Explore IS-IS Adjacencies"},{"location":"basic/2-explore/#explore-is-is-database","text":"Like OSPF, IS-IS uses a topology database \u2013 a distributed, eventually consistent database shared among all routers in an area or among all inter-area routers. Unlike OSPF, where an ABR could have topology information for multiple areas, IS-IS uses a simpler two-level approach: Routers participating in intra-area routing (level-1 and level-1-2 routers) share a level-1 link-state database containing intra-area topology and prefixes. Level-1-2 and level-2 routers (inter-area routers) share a level-2 link-state database containing inter-area topology and prefixes from all IS-IS areas. Tip All routers in your lab are configured as level-2 routers and thus share only the level-2 link-state database 5 . OSPF stores various bits of topology information in multiple types of Link State Advertisements (LSA). IS-IS stores all information generated by a single router in a single Link State Information Packet (LSP) unless it has too much information for a single LSP, in which case it generates multiple LSP fragments ( more details ). Tip IS-IS cannot fragment LSPs in transit; the maximum LSP size must never exceed the lowest MTU of any link in the IS-IS network. IS-IS contains no mechanism to dynamically detect the minimum network-wide MTU; you have to set the maximum LSP size with a router configuration command similar to lsp-mtu . The identifier of an IS-IS LSP is always in the format router-id.lsp-id.fragment-id . The router-id is the NET (although you can usually use hostnames), the lsp-id becomes relevant on multi-access links (we\u2019ll get there in another lab exercise), and the fragment-id is the sequence number of the LSP fragment. You can inspect the IS-IS topology database with a command similar to show isis database . The short printout usually lists the LSPs (their ID), the LSP length, their sequence number, and their remaining lifetime. Tip A quickly increasing LSP sequence number might indicate routing instabilities. The IS-IS topology database overview displayed by FRRouting $ netlab connect rtr --show isis database Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL rtr.00-00 * 113 0x00000002 0x902e 1626 0/0/0 x1.00-00 92 0x00000002 0x23a0 1659 0/0/0 x2.00-00 92 0x00000002 0xc8f0 1633 0/0/0 3 LSPs The IS-IS topology database overview displayed by Arista cEOS rtr>show isis database Legend: H - hostname conflict U - node unreachable IS-IS Instance: Gandalf VRF: default IS-IS Level 2 Link State Database LSPID Seq Num Cksum Life Length IS Received LSPID Flags rtr.00-00 2 26795 1042 119 L2 0000.0000.0001.00-00 <> x1.00-00 2 9120 1610 92 L2 0000.0000.0002.00-00 <> x2.00-00 2 51440 1610 92 L2 0000.0000.0003.00-00 <> You can inspect the contents of an IS-IS LSP with a command similar to show isis database detail . Each IS-IS LSP contains numerous data items encoded as Type-Length-Value triplets. The TLV values are usually displayed in a human-friendly format; you\u2019d have to use a packet capture tool like tcpdump or wireshark to see the dirty details. The recognized IS-IS data types are collected in the IANA IS-IS TLV Codepoints registry; you\u2019d usually see the following TLVs in a modern IPv4 network: TLV Description 1 Area address 137 Hostname 242 Router capabilities 129 Supported protocols (IPv4/IPv6) 22 Extended IS Reachability 6 The cost to reach adjacent routers 132 IPv4 Interface Address 135 IPv4 Extended Reachability The cost of a connected prefix This is how FRRouting and Arista cEOS display the LSP information: LSP content displayed by FRRouting $ netlab connect rtr --show isis database detail rtr.00-00 Connecting to container clab-explore-rtr, executing vtysh -c \"show isis database detail rtr.00-00\" Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL rtr.00-00 * 113 0x00000002 0x902e 1589 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 Hostname: rtr TE Router ID: 10.0.0.1 Router Capability: 10.0.0.1 , D:0, S:0 Extended Reachability: 0000.0000.0002.00 (Metric: 10) Extended Reachability: 0000.0000.0003.00 (Metric: 10) IPv4 Interface Address: 10.0.0.1 Extended IP Reachability: 10.0.0.1/32 (Metric: 10) Extended IP Reachability: 10.1.0.0/30 (Metric: 10) Extended IP Reachability: 10.1.0.4/30 (Metric: 10) LSP content displayed by Arista EOS rtr>show isis database rtr.00-00 detail Legend: H - hostname conflict U - node unreachable IS-IS Instance: Gandalf VRF: default IS-IS Level 2 Link State Database LSPID Seq Num Cksum Life Length IS Received LSPID Flags rtr.00-00 2 26795 1001 119 L2 0000.0000.0001.00-00 <> LSP generation remaining wait time: 0 ms Time remaining until refresh: 701 s NLPID: 0xCC(IPv4) Hostname: rtr Area addresses: 49.0001 Interface address: 10.1.0.5 Interface address: 10.1.0.1 Interface address: 10.0.0.1 IS Neighbor : x1.00 Metric: 10 IS Neighbor : x2.00 Metric: 10 Reachability : 10.1.0.4/30 Metric: 10 Type: 1 Up Reachability : 10.1.0.0/30 Metric: 10 Type: 1 Up Reachability : 10.0.0.1/32 Metric: 10 Type: 1 Up Router Capabilities: Router Id: 10.0.0.1 Flags: [] Area leader priority: 250 algorithm: 0 The LSP information is used to build a topology graph that the SPF algorithm uses to find the lowest cost path to every known IP prefix: The LSPs are nodes in the topology graph The \u200cExtended IS Reachability TLV describes the unidirectional links in the topology graph The Extended IP Reachability TLVs describe leaf nodes (IP prefixes) attached to the LSPs In the first phase, the SPF algorithm finds the shortest path to every LSP in the topology graph; in the second phase, it finds the minimum cost path toward every prefix advertised by other routers.","title":"Explore IS-IS Database"},{"location":"basic/2-explore/#frag","text":"You rarely see LSP fragments in small networks, but it\u2019s pretty easy to generate them by lowering the maximum LSP size. For example, if we reduce the LSP size on rtr to 256, we\u2019ll get two fragments: rtr# show isis database Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL rtr.00-00 * 67 0x00000024 0xe3a6 1648 0/0/0 rtr.00-01 * 75 0x00000006 0xa54b 1648 0/0/0 x1.00-00 92 0x00000017 0xf8b5 1288 0/0/0 x2.00-00 92 0x00000018 0x9c07 1043 0/0/0 The LSP fragments contain the same information as the original LSP, only split across multiple smaller database objects: rtr# show isis database detail rtr.00-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL rtr.00-00 * 67 0x00000024 0xe3a6 1590 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 Hostname: rtr TE Router ID: 10.0.0.1 Router Capability: 10.0.0.1 , D:0, S:0 Extended Reachability: 0000.0000.0002.00 (Metric: 10) rtr# show isis database detail rtr.00-01 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL rtr.00-01 * 75 0x00000006 0xa54b 1589 0/0/0 Extended Reachability: 0000.0000.0003.00 (Metric: 10) IPv4 Interface Address: 10.0.0.1 Extended IP Reachability: 10.0.0.1/32 (Metric: 10) Extended IP Reachability: 10.1.0.0/30 (Metric: 10) Extended IP Reachability: 10.1.0.4/30 (Metric: 10) Next: IS-IS on Point-to-Point Links","title":"LSP Fragments"},{"location":"basic/2-explore/#reference-information","text":"","title":"Reference Information"},{"location":"basic/2-explore/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port rtr Ethernet1 x1 eth1 rtr Ethernet2 x2 eth1 Note: The interface names depend on the devices you use in the lab. The printout was generated with Arista EOS running on RTR and FRRouting running on X1 and X2.","title":"Lab Wiring"},{"location":"basic/2-explore/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description rtr 10.0.0.1/32 Loopback Ethernet1 10.1.0.1/30 rtr -> x1 Ethernet2 10.1.0.5/30 rtr -> x2 x1 10.0.0.2/32 Loopback eth1 10.1.0.2/30 x1 -> rtr x2 10.0.0.3/32 Loopback eth1 10.1.0.6/30 x2 -> rtr Similar, but not exactly equivalent to OSPF ABR \u21a9 Router names are advertised using the Dynamic Hostname TLV defined in RFC 5301 . \u21a9 Subnetwork point of attachment \u2013 a fancy OSI name for a MAC address. \u21a9 We\u2019re using level-2-only routers in the initial lab exercises. We\u2019ll explore multi-level routing in one of the more advanced exercises. \u21a9 We\u2019ll cover multi-level IS-IS routing in another lab exercise. \u21a9 Also known as Wide Metrics (covered in another lab exercise). \u21a9","title":"Lab Addressing"},{"location":"basic/3-p2p/","text":"IS-IS on Point-to-Point Links In the Configure IS-IS Routing for IPv4 lab exercise, I told you to configure the links as point-to-point links and promised a detailed explanation in a follow-up lab exercise. We got that far; let\u2019s see why using point-to-point links on Ethernet interfaces makes sense. To keep things simple, we\u2019ll use the simplest possible lab topology: two routers connected with a single link. Device Requirements Use any device supported by the netlab IS-IS configuration module . Starting the Lab Assuming you already set up your lab infrastructure : Change directory to basic/3-p2p Execute netlab up Log into lab devices with netlab connect Point-to-Point and Multi-Access Links Like OSPF, IS-IS supports point-to-point (P2P) and multi-access links. Point-to-point links were traditionally used on P2P WAN links; all other media types (LAN, but also multi-access WAN like Frame Relay) used multi-access links. That\u2019s still the default behavior you get on most platforms. Multi-access links have two drawbacks when compared to point-to-point links: The IS-IS topology database contains extra objects (LSPs) describing LAN links. The routers on a multi-access link must elect a Designated Intermediate System 1 , prolonging the adjacency establishment process 2 . Like OSPF, the election process considers router priority and its System ID. Unlike OSPF, there is no Backup DIS in IS-IS; routers connected to a multi-access link elect a new DIS when the current one is gone. Exploring Multi-Access Database Structures It\u2019s time to get our hands dirty. Log into one of the lab devices and examine its IS-IS database. You should get a printout similar to this one. Please note an extra LSP (the description of the LAN subnet generated by R2): r1# show isis database Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r1.00-00 * 92 0x00000005 0xc392 1164 0/0/0 r2.00-00 92 0x00000005 0x60ef 1167 0/0/0 r2.74-00 51 0x00000003 0x5202 1239 0/0/0 Let\u2019s inspect the extra LSP. It looks very similar to an OSPF type-2 LSA: It describes links from the LAN segment to individual routers. Unlike OSPF type-2 LSA, it does not contain the LAN prefix. r1# show isis database detail r2.74-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r2.74-00 51 0x00000003 0x5202 1130 0/0/0 Extended Reachability: 0000.0000.0002.00 (Metric: 0) Extended Reachability: 0000.0000.0001.00 (Metric: 0) Tip The core IS-IS data structures are protocol-agnostic. Protocol-specific prefixes are advertised as part of the router LSP. Not surprisingly, the routers connected to the LAN segment advertise their links to the LAN segment and the LAN IPv4 prefix. This is what R1 has to say: r1# show isis database detail r1.00-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r1.00-00 * 92 0x00000006 0xc193 1780 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 Hostname: r1 TE Router ID: 10.0.0.1 Router Capability: 10.0.0.1 , D:0, S:0 Extended Reachability: 0000.0000.0002.74 (Metric: 10) IPv4 Interface Address: 10.0.0.1 Extended IP Reachability: 10.0.0.1/32 (Metric: 10) Extended IP Reachability: 10.1.0.0/30 (Metric: 10) Tip It\u2019s worth noting that the router LSP does not specify the interface on which a particular IP prefix is; it just claims that the router knows how to reach the prefix with the specified cost. That\u2019s enough to find the optimum paths to all prefixes in the network 3 Using Point-to-Point Links Core Ethernet links in modern networks are usually point-to-point links 4 between routers 5 . Modeling those links as multi-access networks makes no sense, yet most IS-IS implementations use that approach on all LAN interfaces. Use an interface configuration command similar to isis network point-to-point to tell IS-IS to treat an interface like a point-to-point link. Do that on both routers in your network. Tip While changing the interface type, you might observe logging/error messages similar to p2p hello on non p2p circuit or lan hello on non broadcast circuit 6 . Let\u2019s inspect the IS-IS topology database after the change. As expected, it contains two LSPs (one per router). r1# show isis database Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r1.00-00 * 92 0x00000008 0x5d6a 1598 0/0/0 r2.00-00 92 0x00000009 0xd4ec 1558 0/0/0 The LSPs describe the direct connection between the routers. For example, R1 claims it\u2019s directly connected to R2 7 : r1# show isis database detail r1.00-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r1.00-00 * 92 0x00000008 0x5d6a 1533 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 Hostname: r1 TE Router ID: 10.0.0.1 Router Capability: 10.0.0.1 , D:0, S:0 Extended Reachability: 0000.0000.0002.00 (Metric: 10) IPv4 Interface Address: 10.0.0.1 Extended IP Reachability: 10.0.0.1/32 (Metric: 10) Extended IP Reachability: 10.1.0.0/30 (Metric: 10) Next: Using IS-IS Metrics Three-Way Handshake Original IS-IS specifications used a simple HELLO protocol: whenever a router received an Intermediate System Hello (ISH) from an adjacent router, it assumed the adjacent router could be reached, resulting in miserable failures on unidirectional links 8 . That hurdle was removed with the three-way handshake defined in RFC 5303 . That RFC specifies a new IS-IS option (Point-to-Point Three-Way Adjacency) that contains the System ID of the adjacent device, allowing IS-IS routers to verify they have a two-way communication 9 . Modern IS-IS implementations use the three-way handshake by default. Still, you might have to turn it off to interoperate with an older device (or a device with ancient defaults) with an interface command similar to no isis three-way-handshake 10 . Warning A mismatch in the three-way handshake setting could have bizarre results. For example, turning it off on a FRRouting device results in one of the neighbors having a fully operational IS-IS adjacency while, at the same time, the other neighbor claims it can see no neighbors. To make matters worse, that often happens only after the IS-IS adjacency has been lost and would have to be re-established. As the last task in this lab, try out how your devices react to a three-way-handshake mismatch (assuming you can configure it): Turn it off on one of the routers. Clear the IS-IS adjacency with a command similar to clear isis neighbor Enjoy the confusing logging messages. Next: Using IS-IS Metrics Reference Information Lab Wiring Origin Device Origin Port Destination Device Destination Port r1 eth1 r2 eth1 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description r1 10.0.0.1/32 Loopback eth1 10.1.0.1/30 r1 -> r2 r2 10.0.0.2/32 Loopback eth1 10.1.0.2/30 r2 -> r1 Intermediate System is an OSI-compliant word for a router. OSPF would call DIS a DR. \u21a9 And consequently, the overall convergence time after a link recovery. \u21a9 The proof is left as an exercise for the reader. \u21a9 A major exception: routers connected to a Carrier Ethernet E-LAN service. \u21a9 The devices also known as layer-3 switches in marketing collaterals. \u21a9 On many network devices, you must enable message logging on terminal sessions with a command similar to terminal monitor . \u21a9 FRR printouts are a bit inconsistent. Router names are displayed in high-level printouts, while the detailed printouts contain system IDs. Use the show isis hostname command to display the mapping between system IDs and hostnames. \u21a9 See the introduction section of RFC 5303 for more details. \u21a9 OSPF has had similar functionality since its early days. Its hello packet contains the list of neighbors a router can see on an interface. \u21a9 RFC 5303 was published in 2008, and recent IS-IS implementations, for example, Arista EOS, no longer have that nerd knob. \u21a9","title":"IS-IS on Point-to-Point Links"},{"location":"basic/3-p2p/#is-is-on-point-to-point-links","text":"In the Configure IS-IS Routing for IPv4 lab exercise, I told you to configure the links as point-to-point links and promised a detailed explanation in a follow-up lab exercise. We got that far; let\u2019s see why using point-to-point links on Ethernet interfaces makes sense. To keep things simple, we\u2019ll use the simplest possible lab topology: two routers connected with a single link.","title":"IS-IS on Point-to-Point Links"},{"location":"basic/3-p2p/#device-requirements","text":"Use any device supported by the netlab IS-IS configuration module .","title":"Device Requirements"},{"location":"basic/3-p2p/#starting-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/3-p2p Execute netlab up Log into lab devices with netlab connect","title":"Starting the Lab"},{"location":"basic/3-p2p/#point-to-point-and-multi-access-links","text":"Like OSPF, IS-IS supports point-to-point (P2P) and multi-access links. Point-to-point links were traditionally used on P2P WAN links; all other media types (LAN, but also multi-access WAN like Frame Relay) used multi-access links. That\u2019s still the default behavior you get on most platforms. Multi-access links have two drawbacks when compared to point-to-point links: The IS-IS topology database contains extra objects (LSPs) describing LAN links. The routers on a multi-access link must elect a Designated Intermediate System 1 , prolonging the adjacency establishment process 2 . Like OSPF, the election process considers router priority and its System ID. Unlike OSPF, there is no Backup DIS in IS-IS; routers connected to a multi-access link elect a new DIS when the current one is gone.","title":"Point-to-Point and Multi-Access Links"},{"location":"basic/3-p2p/#exploring-multi-access-database-structures","text":"It\u2019s time to get our hands dirty. Log into one of the lab devices and examine its IS-IS database. You should get a printout similar to this one. Please note an extra LSP (the description of the LAN subnet generated by R2): r1# show isis database Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r1.00-00 * 92 0x00000005 0xc392 1164 0/0/0 r2.00-00 92 0x00000005 0x60ef 1167 0/0/0 r2.74-00 51 0x00000003 0x5202 1239 0/0/0 Let\u2019s inspect the extra LSP. It looks very similar to an OSPF type-2 LSA: It describes links from the LAN segment to individual routers. Unlike OSPF type-2 LSA, it does not contain the LAN prefix. r1# show isis database detail r2.74-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r2.74-00 51 0x00000003 0x5202 1130 0/0/0 Extended Reachability: 0000.0000.0002.00 (Metric: 0) Extended Reachability: 0000.0000.0001.00 (Metric: 0) Tip The core IS-IS data structures are protocol-agnostic. Protocol-specific prefixes are advertised as part of the router LSP. Not surprisingly, the routers connected to the LAN segment advertise their links to the LAN segment and the LAN IPv4 prefix. This is what R1 has to say: r1# show isis database detail r1.00-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r1.00-00 * 92 0x00000006 0xc193 1780 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 Hostname: r1 TE Router ID: 10.0.0.1 Router Capability: 10.0.0.1 , D:0, S:0 Extended Reachability: 0000.0000.0002.74 (Metric: 10) IPv4 Interface Address: 10.0.0.1 Extended IP Reachability: 10.0.0.1/32 (Metric: 10) Extended IP Reachability: 10.1.0.0/30 (Metric: 10) Tip It\u2019s worth noting that the router LSP does not specify the interface on which a particular IP prefix is; it just claims that the router knows how to reach the prefix with the specified cost. That\u2019s enough to find the optimum paths to all prefixes in the network 3","title":"Exploring Multi-Access Database Structures"},{"location":"basic/3-p2p/#using-point-to-point-links","text":"Core Ethernet links in modern networks are usually point-to-point links 4 between routers 5 . Modeling those links as multi-access networks makes no sense, yet most IS-IS implementations use that approach on all LAN interfaces. Use an interface configuration command similar to isis network point-to-point to tell IS-IS to treat an interface like a point-to-point link. Do that on both routers in your network. Tip While changing the interface type, you might observe logging/error messages similar to p2p hello on non p2p circuit or lan hello on non broadcast circuit 6 . Let\u2019s inspect the IS-IS topology database after the change. As expected, it contains two LSPs (one per router). r1# show isis database Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r1.00-00 * 92 0x00000008 0x5d6a 1598 0/0/0 r2.00-00 92 0x00000009 0xd4ec 1558 0/0/0 The LSPs describe the direct connection between the routers. For example, R1 claims it\u2019s directly connected to R2 7 : r1# show isis database detail r1.00-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r1.00-00 * 92 0x00000008 0x5d6a 1533 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 Hostname: r1 TE Router ID: 10.0.0.1 Router Capability: 10.0.0.1 , D:0, S:0 Extended Reachability: 0000.0000.0002.00 (Metric: 10) IPv4 Interface Address: 10.0.0.1 Extended IP Reachability: 10.0.0.1/32 (Metric: 10) Extended IP Reachability: 10.1.0.0/30 (Metric: 10) Next: Using IS-IS Metrics","title":"Using Point-to-Point Links"},{"location":"basic/3-p2p/#three-way-handshake","text":"Original IS-IS specifications used a simple HELLO protocol: whenever a router received an Intermediate System Hello (ISH) from an adjacent router, it assumed the adjacent router could be reached, resulting in miserable failures on unidirectional links 8 . That hurdle was removed with the three-way handshake defined in RFC 5303 . That RFC specifies a new IS-IS option (Point-to-Point Three-Way Adjacency) that contains the System ID of the adjacent device, allowing IS-IS routers to verify they have a two-way communication 9 . Modern IS-IS implementations use the three-way handshake by default. Still, you might have to turn it off to interoperate with an older device (or a device with ancient defaults) with an interface command similar to no isis three-way-handshake 10 . Warning A mismatch in the three-way handshake setting could have bizarre results. For example, turning it off on a FRRouting device results in one of the neighbors having a fully operational IS-IS adjacency while, at the same time, the other neighbor claims it can see no neighbors. To make matters worse, that often happens only after the IS-IS adjacency has been lost and would have to be re-established. As the last task in this lab, try out how your devices react to a three-way-handshake mismatch (assuming you can configure it): Turn it off on one of the routers. Clear the IS-IS adjacency with a command similar to clear isis neighbor Enjoy the confusing logging messages. Next: Using IS-IS Metrics","title":"Three-Way Handshake"},{"location":"basic/3-p2p/#reference-information","text":"","title":"Reference Information"},{"location":"basic/3-p2p/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port r1 eth1 r2 eth1","title":"Lab Wiring"},{"location":"basic/3-p2p/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description r1 10.0.0.1/32 Loopback eth1 10.1.0.1/30 r1 -> r2 r2 10.0.0.2/32 Loopback eth1 10.1.0.2/30 r2 -> r1 Intermediate System is an OSI-compliant word for a router. OSPF would call DIS a DR. \u21a9 And consequently, the overall convergence time after a link recovery. \u21a9 The proof is left as an exercise for the reader. \u21a9 A major exception: routers connected to a Carrier Ethernet E-LAN service. \u21a9 The devices also known as layer-3 switches in marketing collaterals. \u21a9 On many network devices, you must enable message logging on terminal sessions with a command similar to terminal monitor . \u21a9 FRR printouts are a bit inconsistent. Router names are displayed in high-level printouts, while the detailed printouts contain system IDs. Use the show isis hostname command to display the mapping between system IDs and hostnames. \u21a9 See the introduction section of RFC 5303 for more details. \u21a9 OSPF has had similar functionality since its early days. Its hello packet contains the list of neighbors a router can see on an interface. \u21a9 RFC 5303 was published in 2008, and recent IS-IS implementations, for example, Arista EOS, no longer have that nerd knob. \u21a9","title":"Lab Addressing"},{"location":"basic/4-metric/","text":"Using IS-IS Metrics Like OSPF, IS-IS uses interface costs (called metrics ) to calculate the best path toward destination IP prefixes. Unlike OSPF, the default metrics are fixes (usually set to 10) and do not reflect the interface bandwidth. For example, in the following topology, using the default IS-IS settings, the traffic between R1 and R3 would use the direct low-speed link. We\u2019ll fix that in this lab exercise. Device Requirements Use any device supported by the netlab IS-IS configuration module . Starting the Lab Assuming you already set up your lab infrastructure : Change directory to basic/4-metric Execute netlab up Log into lab devices with netlab connect Initial Routing Tables Check the routing tables on R1 and R3 and verify that they use the direct (low-bandwidth) link. R1 should use the first Ethernet interface to reach R2 and the second Ethernet interface to reach R3. This is the printout you should get on FRRouting 1 : r1# show ip route 10.0.0.0/24 longer-prefixes Codes: K - kernel route, C - connected, L - local, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, F - PBR, f - OpenFabric, t - Table-Direct, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure L * 10.0.0.1/32 is directly connected, lo, 00:00:58 C>* 10.0.0.1/32 is directly connected, lo, 00:00:58 I>* 10.0.0.2/32 [115/20] via 10.1.0.2, eth1, weight 1, 00:00:55 I>* 10.0.0.3/32 [115/20] via 10.1.0.10, eth2, weight 1, 00:00:55 The cost to reach 10.0.0.2/32 and 10.0.0.3/32 is 20 (when using FRRouting): The cost of the connection between R1 and R2 (or R1 and R3) is 10. R2 and R3 advertise the loopback prefixes with a cost of 10 (this detail may vary across different implementations). You can check these details in the IS-IS topology database: R1 LSP \u2013 note the Extended Reachability metric toward R2 and R3 r1# show isis database detail r1.00-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r1.00-00 * 112 0x00000003 0xc5aa 1093 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 Hostname: r1 TE Router ID: 10.0.0.1 Router Capability: 10.0.0.1 , D:0, S:0 Extended Reachability: 0000.0000.0002.00 (Metric: 10) Extended Reachability: 0000.0000.0003.00 (Metric: 10) IPv4 Interface Address: 10.0.0.1 Extended IP Reachability: 10.0.0.1/32 (Metric: 10) Extended IP Reachability: 10.1.0.0/30 (Metric: 10) Extended IP Reachability: 10.1.0.8/30 (Metric: 10) R2 LSP \u2013 note the Extended IP Reachability metric for 10.0.0.2/32 r1# show isis database detail r2.00-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r2.00-00 112 0x00000003 0xfb73 1049 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 Hostname: r2 TE Router ID: 10.0.0.2 Router Capability: 10.0.0.2 , D:0, S:0 Extended Reachability: 0000.0000.0001.00 (Metric: 10) Extended Reachability: 0000.0000.0003.00 (Metric: 10) IPv4 Interface Address: 10.0.0.2 Extended IP Reachability: 10.0.0.2/32 (Metric: 10) Extended IP Reachability: 10.1.0.0/30 (Metric: 10) Extended IP Reachability: 10.1.0.4/30 (Metric: 10) Changing the IS-IS Interface Metric You can change the IS-IS interface metric with an interface configuration command similar to isis metric 2 . Change the metric on the R1-R3 link to 50 (you have to make the change on both ends of the link). Verifying the Change After the change, R1 should use the first Ethernet interface to reach R3\u2019s loopback address. This is the printout you should get on FRRouting: r1# show ip route 10.0.0.0/24 longer-prefixes Codes: K - kernel route, C - connected, L - local, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, F - PBR, f - OpenFabric, t - Table-Direct, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure L * 10.0.0.1/32 is directly connected, lo, 00:32:08 C>* 10.0.0.1/32 is directly connected, lo, 00:32:08 I>* 10.0.0.2/32 [115/20] via 10.1.0.2, eth1, weight 1, 00:32:05 I>* 10.0.0.3/32 [115/30] via 10.1.0.2, eth1, weight 1, 00:02:53 Narrow, Wide, and Transitional Metrics Did you notice the Extended Reachability and Extended IP Reachability headings in the LSP printouts? Here\u2019s the full story: Original IS-IS specifications had 6-bit metrics (1-63), and the end-to-end cost could not exceed 1023 3 . Today, we call those metrics narrow metrics. When large ISPs started using IS-IS, they quickly discovered that those limits were ridiculous. RFC 3784 defined 24-bit metrics (we call them wide metrics). That\u2019s what most implementations use today. Some networks had to transition from narrow to wide metrics, and the solution was to advertise both sets of metrics until all devices in the network understand wide metrics. Some vendors call that approach transition metrics. Tip I haven\u2019t seen an IS-IS implementation that would not understand the narrow metrics, and all recent implementations support wide metrics (they\u2019ve been around for 20 years). You have to use the transition metrics only when you have an ancient device in your network that does not understand the wide metrics. Let\u2019s try to reproduce the world we lived in around the turn of the millennium. FRRouting has a metric-style router configuration command. Let\u2019s set it to narrow on R1 and see what happens to the R1 LSP: r1# show isis database detail r1.00-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r1.00-00 * 116 0x00000005 0x4857 1781 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 IS Reachability: 0000.0000.0002.00 (Metric: 10) IS Reachability: 0000.0000.0003.00 (Metric: 50) Hostname: r1 Router Capability: 10.0.0.1 , D:0, S:0 IP Reachability: 10.0.0.1/32 (Metric: 10) IP Reachability: 10.1.0.0/30 (Metric: 10) IP Reachability: 10.1.0.8/30 (Metric: 50) IPv4 Interface Address: 10.0.0.1 As you can see, R1 replaced the Extended Reachability metric with the IS Reachability metric and the Extended IP Reachability metric with the IP Reachability metric . It also wouldn\u2019t allow you to increase the metric on the R1-R3 link above 63. Finally, let\u2019s set the metric style to transition and observe the changes in R1 LSP. As expected, the LSP contains two sets of metrics for every link and IP prefix. r1# sh isis database detail r1.00-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r1.00-00 * 175 0x0000000a 0x7dab 1785 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 IS Reachability: 0000.0000.0002.00 (Metric: 10) IS Reachability: 0000.0000.0003.00 (Metric: 50) Hostname: r1 TE Router ID: 10.0.0.1 Router Capability: 10.0.0.1 , D:0, S:0 Extended Reachability: 0000.0000.0002.00 (Metric: 10) Extended Reachability: 0000.0000.0003.00 (Metric: 50) IP Reachability: 10.0.0.1/32 (Metric: 10) IP Reachability: 10.1.0.0/30 (Metric: 10) IP Reachability: 10.1.0.8/30 (Metric: 50) IPv4 Interface Address: 10.0.0.1 Extended IP Reachability: 10.0.0.1/32 (Metric: 10) Extended IP Reachability: 10.1.0.0/30 (Metric: 10) Extended IP Reachability: 10.1.0.8/30 (Metric: 50) And now you know the whole story behind the IS-IS metric types. I hope you\u2019ll never see narrow or transition metric styles in a live network, and if you do (for example, due to ancient vendor defaults), consider changing that to wide . Reference Information Lab Wiring Origin Device Origin Port Destination Device Destination Port r1 eth1 r2 eth1 r2 eth2 r3 eth1 r1 eth2 r3 eth2 Lab Addressing Node/Interface IPv4 Address IPv6 Address Description r1 10.0.0.1/32 Loopback eth1 10.1.0.1/30 r1 -> r2 eth2 10.1.0.9/30 r1 -> r3 r2 10.0.0.2/32 Loopback eth1 10.1.0.2/30 r2 -> r1 eth2 10.1.0.5/30 r2 -> r3 r3 10.0.0.3/32 Loopback eth1 10.1.0.6/30 r3 -> r2 eth2 10.1.0.10/30 r3 -> r1 I\u2019m using the show ip route longer-prefixes command to display just the loopbacks that happen to be in the 10.0.0.0/24 address space. \u21a9 IS-IS can use different metrics for L1 and L2 adjacencies. Don\u2019t waste your time on that detail, and I hope you\u2019ll never see a network using it outside of a CCIE lab. \u21a9 Supposedly, someone had a great idea that you could optimize the SPF algorithm if the metric is small enough to be used as an index of a reasonably sized table. \u21a9","title":"Using IS-IS Metrics"},{"location":"basic/4-metric/#using-is-is-metrics","text":"Like OSPF, IS-IS uses interface costs (called metrics ) to calculate the best path toward destination IP prefixes. Unlike OSPF, the default metrics are fixes (usually set to 10) and do not reflect the interface bandwidth. For example, in the following topology, using the default IS-IS settings, the traffic between R1 and R3 would use the direct low-speed link. We\u2019ll fix that in this lab exercise.","title":"Using IS-IS Metrics"},{"location":"basic/4-metric/#device-requirements","text":"Use any device supported by the netlab IS-IS configuration module .","title":"Device Requirements"},{"location":"basic/4-metric/#starting-the-lab","text":"Assuming you already set up your lab infrastructure : Change directory to basic/4-metric Execute netlab up Log into lab devices with netlab connect","title":"Starting the Lab"},{"location":"basic/4-metric/#initial-routing-tables","text":"Check the routing tables on R1 and R3 and verify that they use the direct (low-bandwidth) link. R1 should use the first Ethernet interface to reach R2 and the second Ethernet interface to reach R3. This is the printout you should get on FRRouting 1 : r1# show ip route 10.0.0.0/24 longer-prefixes Codes: K - kernel route, C - connected, L - local, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, F - PBR, f - OpenFabric, t - Table-Direct, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure L * 10.0.0.1/32 is directly connected, lo, 00:00:58 C>* 10.0.0.1/32 is directly connected, lo, 00:00:58 I>* 10.0.0.2/32 [115/20] via 10.1.0.2, eth1, weight 1, 00:00:55 I>* 10.0.0.3/32 [115/20] via 10.1.0.10, eth2, weight 1, 00:00:55 The cost to reach 10.0.0.2/32 and 10.0.0.3/32 is 20 (when using FRRouting): The cost of the connection between R1 and R2 (or R1 and R3) is 10. R2 and R3 advertise the loopback prefixes with a cost of 10 (this detail may vary across different implementations). You can check these details in the IS-IS topology database: R1 LSP \u2013 note the Extended Reachability metric toward R2 and R3 r1# show isis database detail r1.00-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r1.00-00 * 112 0x00000003 0xc5aa 1093 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 Hostname: r1 TE Router ID: 10.0.0.1 Router Capability: 10.0.0.1 , D:0, S:0 Extended Reachability: 0000.0000.0002.00 (Metric: 10) Extended Reachability: 0000.0000.0003.00 (Metric: 10) IPv4 Interface Address: 10.0.0.1 Extended IP Reachability: 10.0.0.1/32 (Metric: 10) Extended IP Reachability: 10.1.0.0/30 (Metric: 10) Extended IP Reachability: 10.1.0.8/30 (Metric: 10) R2 LSP \u2013 note the Extended IP Reachability metric for 10.0.0.2/32 r1# show isis database detail r2.00-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r2.00-00 112 0x00000003 0xfb73 1049 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 Hostname: r2 TE Router ID: 10.0.0.2 Router Capability: 10.0.0.2 , D:0, S:0 Extended Reachability: 0000.0000.0001.00 (Metric: 10) Extended Reachability: 0000.0000.0003.00 (Metric: 10) IPv4 Interface Address: 10.0.0.2 Extended IP Reachability: 10.0.0.2/32 (Metric: 10) Extended IP Reachability: 10.1.0.0/30 (Metric: 10) Extended IP Reachability: 10.1.0.4/30 (Metric: 10)","title":"Initial Routing Tables"},{"location":"basic/4-metric/#changing-the-is-is-interface-metric","text":"You can change the IS-IS interface metric with an interface configuration command similar to isis metric 2 . Change the metric on the R1-R3 link to 50 (you have to make the change on both ends of the link).","title":"Changing the IS-IS Interface Metric"},{"location":"basic/4-metric/#verifying-the-change","text":"After the change, R1 should use the first Ethernet interface to reach R3\u2019s loopback address. This is the printout you should get on FRRouting: r1# show ip route 10.0.0.0/24 longer-prefixes Codes: K - kernel route, C - connected, L - local, S - static, R - RIP, O - OSPF, I - IS-IS, B - BGP, E - EIGRP, N - NHRP, T - Table, v - VNC, V - VNC-Direct, A - Babel, F - PBR, f - OpenFabric, t - Table-Direct, > - selected route, * - FIB route, q - queued, r - rejected, b - backup t - trapped, o - offload failure L * 10.0.0.1/32 is directly connected, lo, 00:32:08 C>* 10.0.0.1/32 is directly connected, lo, 00:32:08 I>* 10.0.0.2/32 [115/20] via 10.1.0.2, eth1, weight 1, 00:32:05 I>* 10.0.0.3/32 [115/30] via 10.1.0.2, eth1, weight 1, 00:02:53","title":"Verifying the Change"},{"location":"basic/4-metric/#narrow-wide-and-transitional-metrics","text":"Did you notice the Extended Reachability and Extended IP Reachability headings in the LSP printouts? Here\u2019s the full story: Original IS-IS specifications had 6-bit metrics (1-63), and the end-to-end cost could not exceed 1023 3 . Today, we call those metrics narrow metrics. When large ISPs started using IS-IS, they quickly discovered that those limits were ridiculous. RFC 3784 defined 24-bit metrics (we call them wide metrics). That\u2019s what most implementations use today. Some networks had to transition from narrow to wide metrics, and the solution was to advertise both sets of metrics until all devices in the network understand wide metrics. Some vendors call that approach transition metrics. Tip I haven\u2019t seen an IS-IS implementation that would not understand the narrow metrics, and all recent implementations support wide metrics (they\u2019ve been around for 20 years). You have to use the transition metrics only when you have an ancient device in your network that does not understand the wide metrics. Let\u2019s try to reproduce the world we lived in around the turn of the millennium. FRRouting has a metric-style router configuration command. Let\u2019s set it to narrow on R1 and see what happens to the R1 LSP: r1# show isis database detail r1.00-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r1.00-00 * 116 0x00000005 0x4857 1781 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 IS Reachability: 0000.0000.0002.00 (Metric: 10) IS Reachability: 0000.0000.0003.00 (Metric: 50) Hostname: r1 Router Capability: 10.0.0.1 , D:0, S:0 IP Reachability: 10.0.0.1/32 (Metric: 10) IP Reachability: 10.1.0.0/30 (Metric: 10) IP Reachability: 10.1.0.8/30 (Metric: 50) IPv4 Interface Address: 10.0.0.1 As you can see, R1 replaced the Extended Reachability metric with the IS Reachability metric and the Extended IP Reachability metric with the IP Reachability metric . It also wouldn\u2019t allow you to increase the metric on the R1-R3 link above 63. Finally, let\u2019s set the metric style to transition and observe the changes in R1 LSP. As expected, the LSP contains two sets of metrics for every link and IP prefix. r1# sh isis database detail r1.00-00 Area Gandalf: IS-IS Level-2 link-state database: LSP ID PduLen SeqNumber Chksum Holdtime ATT/P/OL r1.00-00 * 175 0x0000000a 0x7dab 1785 0/0/0 Protocols Supported: IPv4 Area Address: 49.0001 IS Reachability: 0000.0000.0002.00 (Metric: 10) IS Reachability: 0000.0000.0003.00 (Metric: 50) Hostname: r1 TE Router ID: 10.0.0.1 Router Capability: 10.0.0.1 , D:0, S:0 Extended Reachability: 0000.0000.0002.00 (Metric: 10) Extended Reachability: 0000.0000.0003.00 (Metric: 50) IP Reachability: 10.0.0.1/32 (Metric: 10) IP Reachability: 10.1.0.0/30 (Metric: 10) IP Reachability: 10.1.0.8/30 (Metric: 50) IPv4 Interface Address: 10.0.0.1 Extended IP Reachability: 10.0.0.1/32 (Metric: 10) Extended IP Reachability: 10.1.0.0/30 (Metric: 10) Extended IP Reachability: 10.1.0.8/30 (Metric: 50) And now you know the whole story behind the IS-IS metric types. I hope you\u2019ll never see narrow or transition metric styles in a live network, and if you do (for example, due to ancient vendor defaults), consider changing that to wide .","title":"Narrow, Wide, and Transitional Metrics"},{"location":"basic/4-metric/#reference-information","text":"","title":"Reference Information"},{"location":"basic/4-metric/#lab-wiring","text":"Origin Device Origin Port Destination Device Destination Port r1 eth1 r2 eth1 r2 eth2 r3 eth1 r1 eth2 r3 eth2","title":"Lab Wiring"},{"location":"basic/4-metric/#lab-addressing","text":"Node/Interface IPv4 Address IPv6 Address Description r1 10.0.0.1/32 Loopback eth1 10.1.0.1/30 r1 -> r2 eth2 10.1.0.9/30 r1 -> r3 r2 10.0.0.2/32 Loopback eth1 10.1.0.2/30 r2 -> r1 eth2 10.1.0.5/30 r2 -> r3 r3 10.0.0.3/32 Loopback eth1 10.1.0.6/30 r3 -> r2 eth2 10.1.0.10/30 r3 -> r1 I\u2019m using the show ip route longer-prefixes command to display just the loopbacks that happen to be in the 10.0.0.0/24 address space. \u21a9 IS-IS can use different metrics for L1 and L2 adjacencies. Don\u2019t waste your time on that detail, and I hope you\u2019ll never see a network using it outside of a CCIE lab. \u21a9 Supposedly, someone had a great idea that you could optimize the SPF algorithm if the metric is small enough to be used as an index of a reasonably sized table. \u21a9","title":"Lab Addressing"}]}