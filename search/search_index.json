{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open-Source IS-IS Configuration Labs This series of hands-on labs will help you master the IS-IS routing protocol configuration on a platform of your choice 1 , including: Arista EOS Cisco ASAv, IOSv, IOS XE, IOS XR and Nexus OS FRRouting Dell OS10 Juniper vSRX, vMX and vPTX Nokia SR OS and SR Linux Vyatta VyOS We\u2019re still working on the lab exercises , but if this is your first visit to this site, you should start with the Installation and Setup documentation or run labs in GitHub codespaces . Some assembly required: the virtual machines or containers that we recommend to use as external BGP speakers are easy to download, but you\u2019ll have to build a Vagrant box or install a vendor-supplied Vagrant box or Docker container image for most other platforms. See installation and setup for details. \u21a9","title":"Labs Overview"},{"location":"#open-source-is-is-configuration-labs","text":"This series of hands-on labs will help you master the IS-IS routing protocol configuration on a platform of your choice 1 , including: Arista EOS Cisco ASAv, IOSv, IOS XE, IOS XR and Nexus OS FRRouting Dell OS10 Juniper vSRX, vMX and vPTX Nokia SR OS and SR Linux Vyatta VyOS We\u2019re still working on the lab exercises , but if this is your first visit to this site, you should start with the Installation and Setup documentation or run labs in GitHub codespaces . Some assembly required: the virtual machines or containers that we recommend to use as external BGP speakers are easy to download, but you\u2019ll have to build a Vagrant box or install a vendor-supplied Vagrant box or Docker container image for most other platforms. See installation and setup for details. \u21a9","title":"Open-Source IS-IS Configuration Labs"},{"location":"1-setup/","text":"Software Installation and Lab Setup It\u2019s easiest to use the IS-IS labs with netlab . Still, you can use most of them (potentially with slightly reduced functionality) with any other virtual lab environment or on physical gear. For the rest of this document, we\u2019ll assume you decided to use netlab ; if you want to set up your lab in some other way, read the Manual Setup section of the BGP Labs documentation. Warning IS-IS labs work best with netlab release 1.8.3 or later. If you\u2019re using an earlier netlab release, please upgrade with pip3 install --upgrade networklab . Select the Network Devices You Will Work With You can run FRRouting in all netlab -supported virtualization environments (VirtualBox, libvirt, or Docker) 2 , and if you want to start practicing IS-IS with minimum hassle, consider using it for all lab devices. You can even run FRRouting containers on Macbooks with Apple silicon . If you\u2019d like to use a more traditional networking device, use any other netlab -supported device for which we implemented basic IS-IS configuration as the device to practice with 1 . I recommend Arista cEOS or Nokia SR Linux containers; they are the easiest ones to install and use. Tip If you plan to run the labs in free GitHub Codespaces , you MUST use container-based network devices like Arista cEOS, FRR, Nokia SR Linux, or Vyos. Select the Additional Devices in Your Lab Some labs use additional routers \u2013 preconfigured devices with which your routers exchange routing information. You won\u2019t configure those devices, but you might have to log into them and execute show commands. The default setup uses FRRouting for additional routers; you can use any other device for which we implemented basic IS-IS configuration . Additional limitations (should they exist) are listed under the Device Requirements section of individual lab exercises. Select the Virtualization Environment Now that you know which network device to use, check which virtualization environment you can use. I would prefer containerlab over libvirt with virtualbox being a distant third, but that\u2019s just me. Tip You can also run the IS-IS labs in a free GitHub Codespace . A gotcha: You can use virtualbox if you want to run the lab devices as virtual machines on your Windows- or MacOS laptop with Intel CPU, but even then, I\u2019d prefer running them in a Ubuntu VM . One more gotcha: your hardware and virtualization software (for example, VirtualBox or VMware Fusion) must support nested virtualization if you want to use libvirt on that Ubuntu VM. You don\u2019t need nested virtualization to run Docker containers unless you\u2019re using the crazy trick we\u2019re forced to use for Juniper vMX or Nokia SR OS \u2013 they\u2019re running as a virtual machine within a container . Software Installation Based on the choices you made, you\u2019ll find the installation instructions in one of these documents: Using GitHub Codespaces Ubuntu VM Installation on Windows or MacOS Ubuntu Server Installation Running netlab on any other Linux Server Running netlab in a Public Cloud Running netlab on Apple silicon Discouraged: Virtualbox-Based Lab on Windows or MacOS Once you have completed the software installation you have to deal with the stupidities of downloading and installing network device images ( Virtualbox , libvirt , containers ) unless you decided to use FRR, Nokia SR Linux, or Vyos. I would love to simplify the process, but the networking vendors refuse to play along. Even worse, their licenses prohibit me from downloading the images and creating a packaged VM with preinstalled network devices for you 3 . Fortunately, you only have to go through this colossal waste of time once. Setting Up the Labs We finally got to the fun part \u2013 setting up the labs. If you\u2019re not using GitHub Codespaces: Select a directory where you want to have the IS-IS labs Clone the isis GitHub repository with git clone https://github.com/bgplab/isis.git . GitHub UI gives you other options in the green Code button, including Download ZIP After you get a local copy of the repository: If needed, edit the defaults.yml file in the top directory to set your preferred network device and virtualization environment. For example, I\u2019m using the following settings to run the labs with Arista EOS containers while using FRR as the external BGP feeds: device: eos # Change to your preferred network device provider: clab # Change to virtualbox or libvirt if needed groups: external: device: frr # Change to your preferred external router In a terminal window, change the current directory to one of the lab directories (for example, basic/1-session ), and execute netlab up . Wait for the lab to start and use netlab connect to connect to individual lab devices Have fun. When you\u2019re done, collect the device configurations with netlab collect (if you want to save them) and shut down the lab with netlab down Change the current directory to another lab directory and repeat. Once you run out of lab exercises, create a new one and contribute it with a pull request ;) In that case, you will have to run the labs on a device with an x86 CPU (Intel or AMD). \u21a9 There is no official FRR virtual machine image \u2013 netlab has to download and install FRR on a Ubuntu VM whenever you start an frr node as a virtual machine. Using FRR containers is faster and consumes way less bandwidth or memory. \u21a9 I\u2019m not going to pay a lawyer to read their boilerplate stuff, and I\u2019m definitely not going to rely on my amateur understanding of US copyright law. \u21a9","title":"Installation and Setup"},{"location":"1-setup/#software-installation-and-lab-setup","text":"It\u2019s easiest to use the IS-IS labs with netlab . Still, you can use most of them (potentially with slightly reduced functionality) with any other virtual lab environment or on physical gear. For the rest of this document, we\u2019ll assume you decided to use netlab ; if you want to set up your lab in some other way, read the Manual Setup section of the BGP Labs documentation. Warning IS-IS labs work best with netlab release 1.8.3 or later. If you\u2019re using an earlier netlab release, please upgrade with pip3 install --upgrade networklab .","title":"Software Installation and Lab Setup"},{"location":"1-setup/#select-the-network-devices-you-will-work-with","text":"You can run FRRouting in all netlab -supported virtualization environments (VirtualBox, libvirt, or Docker) 2 , and if you want to start practicing IS-IS with minimum hassle, consider using it for all lab devices. You can even run FRRouting containers on Macbooks with Apple silicon . If you\u2019d like to use a more traditional networking device, use any other netlab -supported device for which we implemented basic IS-IS configuration as the device to practice with 1 . I recommend Arista cEOS or Nokia SR Linux containers; they are the easiest ones to install and use. Tip If you plan to run the labs in free GitHub Codespaces , you MUST use container-based network devices like Arista cEOS, FRR, Nokia SR Linux, or Vyos.","title":"Select the Network Devices You Will Work With"},{"location":"1-setup/#select-the-additional-devices-in-your-lab","text":"Some labs use additional routers \u2013 preconfigured devices with which your routers exchange routing information. You won\u2019t configure those devices, but you might have to log into them and execute show commands. The default setup uses FRRouting for additional routers; you can use any other device for which we implemented basic IS-IS configuration . Additional limitations (should they exist) are listed under the Device Requirements section of individual lab exercises.","title":"Select the Additional Devices in Your Lab"},{"location":"1-setup/#select-the-virtualization-environment","text":"Now that you know which network device to use, check which virtualization environment you can use. I would prefer containerlab over libvirt with virtualbox being a distant third, but that\u2019s just me. Tip You can also run the IS-IS labs in a free GitHub Codespace . A gotcha: You can use virtualbox if you want to run the lab devices as virtual machines on your Windows- or MacOS laptop with Intel CPU, but even then, I\u2019d prefer running them in a Ubuntu VM . One more gotcha: your hardware and virtualization software (for example, VirtualBox or VMware Fusion) must support nested virtualization if you want to use libvirt on that Ubuntu VM. You don\u2019t need nested virtualization to run Docker containers unless you\u2019re using the crazy trick we\u2019re forced to use for Juniper vMX or Nokia SR OS \u2013 they\u2019re running as a virtual machine within a container .","title":"Select the Virtualization Environment"},{"location":"1-setup/#software-installation","text":"Based on the choices you made, you\u2019ll find the installation instructions in one of these documents: Using GitHub Codespaces Ubuntu VM Installation on Windows or MacOS Ubuntu Server Installation Running netlab on any other Linux Server Running netlab in a Public Cloud Running netlab on Apple silicon Discouraged: Virtualbox-Based Lab on Windows or MacOS Once you have completed the software installation you have to deal with the stupidities of downloading and installing network device images ( Virtualbox , libvirt , containers ) unless you decided to use FRR, Nokia SR Linux, or Vyos. I would love to simplify the process, but the networking vendors refuse to play along. Even worse, their licenses prohibit me from downloading the images and creating a packaged VM with preinstalled network devices for you 3 . Fortunately, you only have to go through this colossal waste of time once.","title":"Software Installation"},{"location":"1-setup/#defaults","text":"We finally got to the fun part \u2013 setting up the labs. If you\u2019re not using GitHub Codespaces: Select a directory where you want to have the IS-IS labs Clone the isis GitHub repository with git clone https://github.com/bgplab/isis.git . GitHub UI gives you other options in the green Code button, including Download ZIP After you get a local copy of the repository: If needed, edit the defaults.yml file in the top directory to set your preferred network device and virtualization environment. For example, I\u2019m using the following settings to run the labs with Arista EOS containers while using FRR as the external BGP feeds: device: eos # Change to your preferred network device provider: clab # Change to virtualbox or libvirt if needed groups: external: device: frr # Change to your preferred external router In a terminal window, change the current directory to one of the lab directories (for example, basic/1-session ), and execute netlab up . Wait for the lab to start and use netlab connect to connect to individual lab devices Have fun. When you\u2019re done, collect the device configurations with netlab collect (if you want to save them) and shut down the lab with netlab down Change the current directory to another lab directory and repeat. Once you run out of lab exercises, create a new one and contribute it with a pull request ;) In that case, you will have to run the labs on a device with an x86 CPU (Intel or AMD). \u21a9 There is no official FRR virtual machine image \u2013 netlab has to download and install FRR on a Ubuntu VM whenever you start an frr node as a virtual machine. Using FRR containers is faster and consumes way less bandwidth or memory. \u21a9 I\u2019m not going to pay a lawyer to read their boilerplate stuff, and I\u2019m definitely not going to rely on my amateur understanding of US copyright law. \u21a9","title":"Setting Up the Labs"},{"location":"3-upcoming/","text":"Upcoming Labs We just started the projects, and all we can show is a list of ideas. Here they are:","title":"Overview"},{"location":"3-upcoming/#upcoming-labs","text":"We just started the projects, and all we can show is a list of ideas. Here they are:","title":"Upcoming Labs"},{"location":"4-codespaces/","text":"Use GitHub Codespaces You can run IS-IS labs in (free 1 ) GitHub codespaces ; all you need is a GitHub account: Create a new codespace for your IS-IS labs or connect to an existing codespace . Unless you\u2019re using GitHub codespaces with VScode (in which case you know what to do), your codespace opens in a new browser window with three tabs: Explorer (repository folders), Preview (starting with README), and Terminal. Select Lab Devices The IS-IS labs repository uses FRRouting containers as the default device. To change the device settings, edit the defaults.yml file with vi or nano . Tip It\u2019s best to use network devices with free-to-download container images (FRRouting, Nokia SR Linux, Vyos). Use FRRouting containers to use the 2 CPU/8 GB codespaces VM with larger labs. Codespaces have persistent storage; you can download and install other containers . To use containers that have to be downloaded from the vendors\u2019 website, download them onto your laptop, drag-and-drop them into the Folders , and install them like you would on a local netlab instance . You cannot run virtual machines in codespaces (yet?). This also precludes running VMs in virtual machines (the vrnetlab approach). Start a Lab Once you have the codespaces up and running: Click on the desired lab exercise in the README.md preview window to select the exercise folder. Right-click on the exercise folder and select \u201c Open in Integrated Terminal \u201d to launch a bash session in the desired directory. Execute netlab up to start the lab. Expand the exercise folder in the Explorer tab. Right-click on the README.md file and select \u201c Open Preview \u201d to open the rendered version of the file. Click the link in the README.md file to get the exercise description in the preview pane. Connect to your devices with the netlab connect command executed in the Terminal pane. Cleanup and Shutdown Finally, don\u2019t forget to shut down the lab with netlab down and stop your codespace after you\u2019re done: Click on the blue \u201c Codespaces \u201d button in the bottom-left corner of the browser window. Select \u201c Stop Current Codespace \u201d. You should also adjust idle timeout and default retention period in your codespaces settings . You get 120 free core hours per month or pay for more . \u21a9","title":"Use GitHub Codespaces"},{"location":"4-codespaces/#use-github-codespaces","text":"You can run IS-IS labs in (free 1 ) GitHub codespaces ; all you need is a GitHub account: Create a new codespace for your IS-IS labs or connect to an existing codespace . Unless you\u2019re using GitHub codespaces with VScode (in which case you know what to do), your codespace opens in a new browser window with three tabs: Explorer (repository folders), Preview (starting with README), and Terminal.","title":"Use GitHub Codespaces"},{"location":"4-codespaces/#select-lab-devices","text":"The IS-IS labs repository uses FRRouting containers as the default device. To change the device settings, edit the defaults.yml file with vi or nano . Tip It\u2019s best to use network devices with free-to-download container images (FRRouting, Nokia SR Linux, Vyos). Use FRRouting containers to use the 2 CPU/8 GB codespaces VM with larger labs. Codespaces have persistent storage; you can download and install other containers . To use containers that have to be downloaded from the vendors\u2019 website, download them onto your laptop, drag-and-drop them into the Folders , and install them like you would on a local netlab instance . You cannot run virtual machines in codespaces (yet?). This also precludes running VMs in virtual machines (the vrnetlab approach).","title":"Select Lab Devices"},{"location":"4-codespaces/#start-a-lab","text":"Once you have the codespaces up and running: Click on the desired lab exercise in the README.md preview window to select the exercise folder. Right-click on the exercise folder and select \u201c Open in Integrated Terminal \u201d to launch a bash session in the desired directory. Execute netlab up to start the lab. Expand the exercise folder in the Explorer tab. Right-click on the README.md file and select \u201c Open Preview \u201d to open the rendered version of the file. Click the link in the README.md file to get the exercise description in the preview pane. Connect to your devices with the netlab connect command executed in the Terminal pane.","title":"Start a Lab"},{"location":"4-codespaces/#cleanup-and-shutdown","text":"Finally, don\u2019t forget to shut down the lab with netlab down and stop your codespace after you\u2019re done: Click on the blue \u201c Codespaces \u201d button in the bottom-left corner of the browser window. Select \u201c Stop Current Codespace \u201d. You should also adjust idle timeout and default retention period in your codespaces settings . You get 120 free core hours per month or pay for more . \u21a9","title":"Cleanup and Shutdown"},{"location":"99-about/","text":"About the Project In 2023, I started the Open-Source BGP Labs project to recreate the labs I created in the early 1990s. As I posted a status update a year later , Henk Smit made an excellent suggestion : If you ever want to do something similar for IS-IS, I\u2019d be happy to help. I think it would already be helpful to just cover the basics of IS-IS. There is so little knowledge about IS-IS out there, that any new good resource would be awesome. As I was involved in a similar project in the 1990s, it wasn\u2019t hard to persuade me to start a similar series of \u201c IS-IS from rookie to hero \u201d lab exercises. Welcome to the Open-Source IS-IS Configuration Labs project. The project uses netlab 2 to set up the labs and FRRouting containers or a few other devices as external BGP routers. You can use whatever networking devices you wish to work on, and if they happen to be supported by netlab , you\u2019ll get lab topology and basic device configuration for each lab set up in seconds 3 . Most lab exercises using external devices include device configurations for the external routers for people who love wasting time with GUI. You\u2019ll find the lab topology files and initial device configurations in a GitHub repository , but you might explore the lab exercises first . As always, everything starts with a long wish list . I probably missed something important \u2013 please open an issue or a discussion , or (even better) become a contributor and submit a PR. As long as it\u2019s supported by netlab . \u21a9 When you happen to have a Hammer of Thor handy, everything looks like a nail waiting to be hit ;) \u21a9 Unless you love using resource hogs like Nexus OS, IOS XR, or some Junos variants. \u21a9","title":"About the Project"},{"location":"99-about/#about-the-project","text":"In 2023, I started the Open-Source BGP Labs project to recreate the labs I created in the early 1990s. As I posted a status update a year later , Henk Smit made an excellent suggestion : If you ever want to do something similar for IS-IS, I\u2019d be happy to help. I think it would already be helpful to just cover the basics of IS-IS. There is so little knowledge about IS-IS out there, that any new good resource would be awesome. As I was involved in a similar project in the 1990s, it wasn\u2019t hard to persuade me to start a similar series of \u201c IS-IS from rookie to hero \u201d lab exercises. Welcome to the Open-Source IS-IS Configuration Labs project. The project uses netlab 2 to set up the labs and FRRouting containers or a few other devices as external BGP routers. You can use whatever networking devices you wish to work on, and if they happen to be supported by netlab , you\u2019ll get lab topology and basic device configuration for each lab set up in seconds 3 . Most lab exercises using external devices include device configurations for the external routers for people who love wasting time with GUI. You\u2019ll find the lab topology files and initial device configurations in a GitHub repository , but you might explore the lab exercises first . As always, everything starts with a long wish list . I probably missed something important \u2013 please open an issue or a discussion , or (even better) become a contributor and submit a PR. As long as it\u2019s supported by netlab . \u21a9 When you happen to have a Hammer of Thor handy, everything looks like a nail waiting to be hit ;) \u21a9 Unless you love using resource hogs like Nexus OS, IOS XR, or some Junos variants. \u21a9","title":"About the Project"}]}